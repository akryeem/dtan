import os
import sys
module_path = os.path.abspath(os.path.join('..\\..'))
module_path1 = os.path.abspath(os.path.join('..\\..\\..'))
module_path2 = os.path.abspath(os.path.join('..\\..\\DTAN'))
import argparse
import torch
import numpy as np
import matplotlib.pyplot as plt

if module_path not in sys.path:
    sys.path.append(module_path)
if module_path1 not in sys.path:
    sys.path.append(module_path1)
if module_path2 not in sys.path:
    sys.path.append(module_path2)

from models.train_utils import ExperimentsManager, DTAN_args
from DTAN.DTAN_layer import DTAN
from UCR_alignment import argparser
import csv
from scipy.signal import find_peaks
from scipy.signal import filtfilt
from tslearn.preprocessing import TimeSeriesResampler

def my_inter(list1, resample_len):
    if (list1.size == resample_len):
        return list1.tolist()
    tmp =  list1.reshape(list1.size)
    resample_list1 = TimeSeriesResampler(sz=resample_len).fit_transform(tmp)
    tmp = resample_list1.reshape(resample_len)
    return tmp.tolist()

def split_signal2iterations(data):
    b, a = signal.butter(1, 0.03)
    np.set_printoptions(threshold=np.inf, linewidth=np.inf)
    smooth = signal.filtfilt(b, a, data)
    min_indices, _ = find_peaks(-smooth, distance=70, height=20)
    max_indices, _ = find_peaks(smooth, distance=70, height=-25)
    first_split = min_indices[np.argmax(min_indices>max_indices[0])]
    second_split = first_split
    idx = 1
    while (second_split == first_split):
        second_split = min_indices[np.argmax(min_indices>max_indices[idx])]
        idx = idx + 1
    print(f"first_split {first_split}")
    print(f"second_split {second_split}")
    iterations = []
    iterations.append(row[:first_split])
    iterations[0] = np.array([float(x) for x in iterations[0]])
    iterations[0] = iterations[0].reshape(1,len(iterations[0]))
    iterations.append(row[first_split:second_split])
    iterations[1] = np.array([float(x) for x in iterations[1]])
    iterations[1] = iterations[1].reshape(1,len(iterations[1]))
    iterations.append(row[second_split:])
    iterations[2] = np.array([float(x) for x in iterations[2]])
    iterations[2] = iterations[2].reshape(1,len(iterations[2]))
    return iterations

#https://stackoverflow.com/questions/9542738/python-find-in-list
#https://stackoverflow.com/questions/2566412/find-nearest-value-in-numpy-array
#--dataset ex234WInter --dpath "..\..\..\..\UCR_TS_Archive_2015\UCR_TS_Archive_2015"  --n_recurrences 1
def find_nearest(array, value):
    array = np.asarray(array)
    array = array.reshape(array.size)
    idx = (np.abs(array - value)).argmin()
    return idx, array[idx]
    
class Exercise:
    def __init__(self, num, feature):
        ##list of all exercises and features, with frame numbers of each exercise for each feature
        ##exercises_points[feature][exercise][iteration], e.g. exercises_points[1][2][0] is the frame number for the first 
        ##iteration of exercise 3 for feature 2.
        ##feature mapping can be converted from numbers to strings using a dict (a nice to have TODO)
        ##
        exercises_points = [[[320,385],[415,444],[574,606]],
                            [[15,16,17], [18,19,20], [21,22,23], [24,25,26], [27,28,29]],
                            [[30,31,32], [33,34,35], [36,37,38], [39,40,41], [42,43,44]]
                            ]

        self.num = num
        self.feature = feature
        self.points = exercises_points[self.feature][self.num]
    def get(self):
        print(f"{self.num}, {self.feature}")

    def map(self, frame):
        print(f"{self.num}, {frame}")

def inference(args, dataset_name="ECGFiveDays"):

    # Print args
    print(args)

    # Data
    datadir = args.dpath #"data/UCR/UCR_TS_Archive_2015"
    device = 'cpu'
    exp_name = f"{dataset_name}_exp"

    # Init an instance of the experiment class. Holds results
    # and trainning param such as lr, n_epochs etc
    expManager = ExperimentsManager()
    expManager.add_experiment(exp_name, n_epochs=args.n_epochs, batch_size=args.batch_size, lr=args.lr, device=device)
    Experiment = expManager[exp_name]

    # DTAN args
    DTANargs1 = DTAN_args(tess_size=args.tess_size,
                          smoothness_prior=args.smoothness_prior,
                          lambda_smooth=args.lambda_smooth,
                          lambda_var=args.lambda_var,
                          n_recurrences=args.n_recurrences,
                          zero_boundary=True,
                          )
    expManager[exp_name].add_DTAN_arg(DTANargs1)
    SIGNAL_LENGTH = 800
    CHANNELS = 1
    DTANargs = Experiment.get_DTAN_args()

    #channels, input_shape = train_loader.dataset[0][0].shape
    channels = CHANNELS
    input_shape = SIGNAL_LENGTH
    loaded_model = DTAN(input_shape, channels, tess=[DTANargs.tess_size,], n_recurrence=DTANargs.n_recurrences,
                    zero_boundary=DTANargs.zero_boundary, device=device).to(device)
    loaded_model.load_state_dict(torch.load('../../checkpoints/1671694627_hip_ex234_modelstate_dict.pth'))
    loaded_model.eval()

    dataset = dataset_name

    f_name = os.path.join(datadir, dataset)
    #f_name = r"D:\M.Sc_study\github\thesis\ilan_computerVisionML_AI\mediapipe_eval\data\p7\h15_f2_out.txt"
    values=[]         #an empty list to store the second column
    with open(f_name+'.txt', 'r') as rf:
        reader = csv.reader(rf, delimiter=',')
        next(reader) #uncomment if input file has a header line
        for row in reader:
          values.append(float(row[1])) #change to row[1] if input file has two columns
    X_test = np.array([values, values])
    #X_test = np.loadtxt(f_name+'.txt',delimiter=',') #for csv input in one row [e.g. 4,1,5,2,1,1]

    # add a third channel for univariate data
    if len(X_test.shape) < 3:
        X_test = np.expand_dims(X_test, -1)
    # Switch channel dim ()
    # Torch data format is  [N, C, W] W=timesteps
    X_test = np.swapaxes(X_test, 2, 1)

    interpolated_X_test = []
    interpolated_X_test.append(my_inter(X_test[0], input_shape))
    interpolated_X_test.append(my_inter(X_test[1], input_shape))
    interpolated_X_test = np.array(interpolated_X_test)

    ## add a third channel for univariate data
    if len(interpolated_X_test.shape) < 3:
        interpolated_X_test = np.expand_dims(interpolated_X_test, -1)
    interpolated_X_test = np.swapaxes(interpolated_X_test, 2, 1)
    X = torch.Tensor(interpolated_X_test).to("cpu")

    transformed_input_tensor, thetas = loaded_model(X, return_theta=True)
    transformed_input_numpy = transformed_input_tensor.data.cpu().numpy()
    transformed_input_numpy = transformed_input_numpy.reshape(2, input_shape)
    np.savetxt(f'aligned_{dataset}.txt', transformed_input_numpy[0], delimiter=',',fmt='%d')
    
    nb = np.arange(1, input_shape+1)
    #!#plt.plot(nb, transformed_input_numpy[0], label="Aligned", color ="green")
    #!#plt.plot(interpolated_X_test[0][0], label="Orig", color ="blue")
    #!#plt.legend()
    #!##plt.plot(X_test[0][0], color ="red")
    #!#plt.show()

    #perform reverse transform
    theta_inv = torch.mul(thetas[0], -1)

    transformed_input_tensor_inv = loaded_model.T.transform_data(transformed_input_tensor, theta_inv, outsize=(loaded_model.input_shape,))
    transformed_data_numpy_inv = transformed_input_tensor_inv.data.cpu().numpy()
    transformed_data_numpy_inv = transformed_data_numpy_inv.reshape(2, input_shape)
    theta_vals = thetas[0].data.cpu().numpy()

    #$#plt.plot(nb, transformed_input_numpy[0], label="Aligned", color ="green")
    #$#plt.plot(interpolated_X_test[0][0], label="Orig", color ="red")
    #$#plt.plot(transformed_data_numpy_inv[0], label="Reverted", color ="blue")
    #$#plt.legend()
    #$#plt.show()


    #perform same transformation to the identity signal
    identity = np.arange(input_shape * 2)
    identity = identity.reshape(2, input_shape)
    ## add a third channel for univariate data
    if len(identity.shape) < 3:
        identity = np.expand_dims(identity, -1)
    identity = np.swapaxes(identity, 2, 1)
    identityTF = torch.Tensor(identity).to("cpu")
    #identityTF_tensor, thetas = loaded_model(identityTF, return_theta=True)
    identityTF_tensor, thetas = loaded_model.T.transform_data(identityTF, thetas[0], outsize=(loaded_model.input_shape,))
    identityTF_numpy = identityTF_tensor.data.cpu().numpy()
    #identityTF_numpy = identityTF_numpy.reshape(2, input_shape)
    nb = np.arange(1, input_shape+1)
    exercises_points = [[[215,312],[390,422],[545,567]],
                        [[15,16,17], [18,19,20], [21,22,23]],
                        [[30,31,32], [33,34,35], [36,37,38]]
                        ]
    #ex234_class2_mean = [-31,-34,-37,-39,-42,-45,-47,-50,-50,-50,-50,-50,-50,-50,-51,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-48,-48,-48,-48,-48,-48,-48,-48,-48,-48,-47,-47,-47,-46,-46,-45,-45,-44,-44,-44,-43,-43,-43,-43,-43,-43,-42,-42,-42,-42,-42,-42,-41,-41,-41,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-39,-39,-39,-38,-38,-38,-38,-38,-37,-37,-36,-35,-35,-34,-34,-34,-34,-34,-34,-33,-33,-33,-33,-32,-32,-31,-31,-31,-31,-31,-31,-31,-32,-32,-32,-32,-32,-32,-32,-32,-32,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-31,-30,-30,-30,-29,-29,-29,-29,-29,-29,-29,-30,-30,-30,-29,-28,-28,-28,-28,-28,-28,-27,-27,-26,-26,-26,-26,-26,-26,-26,-26,-26,-25,-25,-25,-25,-25,-24,-23,-21,-20,-18,-17,-16,-12,-11,-10,-9 ,-10,-11,-12,-12,-11,-11,-12,-13,-14,-15,-16,-17,-18,-19,-19,-20,-21,-21,-21,-23,-23,-23,-24,-25,-26,-27,-27,-28,-28,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-37,-38,-38,-40,-40,-41,-42,-44,-44,-44,-44,-44,-45,-45,-46,-46,-47,-47,-48,-49,-50,-50,-50,-51,-51,-52,-53,-53,-54,-54,-54,-54,-54,-54,-53,-53,-52,-52,-51,-50,-49,-48,-47,-46,-44,-41,-39,-37,-35,-31,-29,-27,-27,-26,-25,-24,-23,-22,-21,-20,-19,-17,-16,-16,-16,-16,-14,-13,-11,-10,-8 ,-6 ,-6 ,-6 ,-5 ,-4 ,-4 ,-5 ,-4 ,-5 ,-5 ,-5 ,-4 ,-5 ,-5 ,-6 ,-7 ,-7 ,-7 ,-8 ,-8 ,-7 ,-8 ,-9 ,-10,-12,-15,-19,-21,-26,-30,-33,-34,-37,-39,-40,-40,-40,-40,-41,-41,-42,-42,-43,-44,-45,-46,-47,-47,-48,-48,-49,-50,-50,-51,-50,-50,-50,-50,-50,-50,-49,-48,-47,-47,-46,-45,-44,-43,-42,-41,-40,-40,-40,-40,-40,-39,-39,-39,-39,-39,-39,-39,-40,-39,-38,-37,-36,-35,-34,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16,-17,-17,-20,-23,-25,-25,-25,-25,-24,-23,-22,-22,-21,-21,-21,-20,-19,-18,-18,-17,-16,-14,-12,-11,-9 ,-8 ,-6 ,-5 ,-4 ,-3 ,-3 ,-2 ,-2 ,-3 ,-4 ,-5 ,-6 ,-7 ,-7 ,-8 ,-9 ,-10,-12,-13,-15,-14,-14,-15,-16,-16,-16,-16,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-19,-19,-20,-19,-19,-18,-18,-18,-18,-18,-18,-18,-18,-18,-19,-20,-20,-22,-24,-25,-26,-26,-27,-28,-29,-30,-30,-30,-30,-31,-32,-33,-34,-35,-36,-36,-36,-37,-37,-37,-37,-37,-38,-38,-39,-40,-40,-41,-43,-44,-45,-46,-46,-47,-48,-48,-49,-49,-50,-50,-51,-51,-51,-51,-51,-51,-51,-52,-52,-52,-52,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53]
#    ex234_class2_mean = [-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-48,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-49,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-52,-52,-52,-52,-52,-53,-53,-53,-53,-53,-53,-53,-54,-54,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-51,-51,-50,-50,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-50,-49,-48,-47,-47,-47,-46,-45,-45,-44,-43,-44,-44,-44,-42,-40,-38,-36,-34,-33,-31,-31,-30,-29,-28,-27,-26,-25,-25,-24,-23,-23,-21,-20,-19,-18,-18,-19,-20,-19,-18,-18,-18,-18,-17,-17,-17,-16,-17,-17,-17,-17,-16,-15,-14,-13,-12,-12,-12,-12,-13,-14,-15,-16,-17,-20,-22,-24,-26,-28,-30,-32,-33,-33,-34,-34,-34,-34,-34,-35,-36,-37,-39,-40,-41,-41,-43,-44,-44,-45,-45,-46,-47,-48,-49,-49,-50,-50,-48,-45,-43,-41,-39,-37,-35,-33,-31,-29,-26,-24,-22,-20,-19,-18,-17,-16,-16,-15,-15,-15,-14,-14,-13,-12,-12,-12,-12,-10,-9,-9,-8,-7,-6,-6,-6,-5,-6,-6,-6,-5,-6,-6,-6,-6,-7,-6,-7,-7,-8,-8,-9,-9,-10,-11,-11,-11,-12,-12,-12,-12,-12,-13,-13,-14,-16,-16,-15,-16,-15,-15,-14,-14,-13,-12,-11,-12,-12,-12,-12,-14,-14,-14,-14,-14,-14,-15,-15,-15,-16,-16,-17,-17,-18,-18,-18,-19,-20,-20,-21,-21,-21,-22,-22,-23,-24,-24,-25,-25,-26,-27,-28,-29,-30,-31,-32,-33,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-48,-49,-50,-51,-51,-52,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-52,-51,-51,-49,-48,-47,-45,-44,-41,-38,-35,-32,-28,-24,-22,-21,-19,-17,-15,-14,-13,-11,-10,-10,-9,-8,-6,-5,-4,-3,-3,-2,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2,-3,-4,-6,-6,-6,-6,-7,-7,-7,-8,-8,-9,-9,-10,-10,-11,-11,-11,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-12,-12,-12,-12,-13,-14,-14,-15,-16,-17,-18,-19,-20,-21,-21,-22,-24,-24,-24,-25,-26,-27,-27,-28,-29,-31,-34,-36,-38,-40,-40,-39,-39,-39,-39,-40,-41,-42,-43,-44,-45,-45,-47,-48,-49,-49,-49,-49,-50,-50,-51,-51,-51,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-50,-50,-50,-50,-50,-50,-49,-49,-49,-49,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-52,-52,-52,-52,-52,-52,-51,-51,-51,-51,-51,-50,-50,-50,-50,-49,-49,-48,-47]
    #ex234_class2_mean = [-37.159912109375000,-40.547870635986328,-43.493286132812500,-46.184719085693359,-48.287075042724609,-48.647491455078125,-48.962623596191406,-49.403324127197266,-49.977313995361328,-50.337207794189453,-50.666744232177734,-50.940505981445312,-50.965995788574219,-50.842449188232422,-50.524944305419922,-50.244331359863281,-50.085857391357422,-50.028450012207031,-50.026905059814453,-50.294178009033203,-50.515922546386719,-50.677947998046875,-50.780799865722656,-50.828659057617188,-50.749061584472656,-50.658199310302734,-50.555149078369141,-50.547126770019531,-50.595684051513672,-50.754127502441406,-50.905376434326172,-51.052047729492188,-51.134025573730469,-51.207286834716797,-51.245403289794922,-51.326801300048828,-51.422313690185547,-51.550445556640625,-51.636737823486328,-51.684150695800781,-51.724174499511719,-51.772327423095703,-51.861339569091797,-51.983936309814453,-52.110645294189453,-52.238475799560547,-52.344402313232422,-52.431346893310547,-52.544197082519531,-52.659698486328125,-52.764263153076172,-52.925781250000000,-53.108928680419922,-53.250244140625000,-53.358997344970703,-53.441497802734375,-53.495349884033203,-53.515522003173828,-53.539146423339844,-53.593261718750000,-53.639709472656250,-53.682090759277344,-53.714088439941406,-53.731323242187500,-53.748790740966797,-53.756359100341797,-53.759166717529297,-53.759593963623047,-53.766242980957031,-53.773326873779297,-53.776985168457031,-53.769489288330078,-53.763458251953125,-53.750091552734375,-53.730041503906250,-53.707252502441406,-53.691581726074219,-53.688343048095703,-53.685203552246094,-53.681449890136719,-53.682281494140625,-53.685920715332031,-53.695182800292969,-53.707885742187500,-53.730529785156250,-53.760009765625000,-53.790332794189453,-53.822216033935547,-53.860240936279297,-53.900611877441406,-53.930126190185547,-53.955871582031250,-54.001129150390625,-54.053245544433594,-54.087749481201172,-54.118549346923828,-54.131866455078125,-54.117286682128906,-54.104087829589844,-54.103527069091797,-54.101848602294922,-54.102149963378906,-54.109031677246094,-54.120384216308594,-54.127098083496094,-54.120586395263672,-54.094062805175781,-54.042083740234375,-53.963783264160156,-53.886138916015625,-53.769500732421875,-53.644927978515625,-53.553852081298828,-53.492870330810547,-53.435688018798828,-53.403179168701172,-53.382202148437500,-53.375801086425781,-53.407665252685547,-53.426666259765625,-53.438179016113281,-53.452972412109375,-53.466361999511719,-53.487373352050781,-53.510742187500000,-53.537437438964844,-53.575309753417969,-53.615337371826172,-53.662303924560547,-53.701683044433594,-53.724555969238281,-53.682884216308594,-53.597465515136719,-53.496997833251953,-53.379249572753906,-53.235973358154297,-53.092712402343750,-52.996044158935547,-52.967975616455078,-52.976703643798828,-52.971832275390625,-53.004528045654297,-53.113445281982422,-53.227893829345703,-53.314033508300781,-53.383319854736328,-53.427070617675781,-53.454700469970703,-53.488243103027344,-53.523021697998047,-53.583320617675781,-53.615814208984375,-53.640220642089844,-53.639770507812500,-53.641223907470703,-53.632987976074219,-53.614948272705078,-53.548809051513672,-53.427452087402344,-53.276588439941406,-53.117362976074219,-52.904376983642578,-52.679058074951172,-52.449607849121094,-52.266387939453125,-52.086601257324219,-51.991222381591797,-51.863792419433594,-51.733337402343750,-51.561504364013672,-51.366710662841797,-51.198238372802734,-51.073417663574219,-50.963253021240234,-50.851020812988281,-50.736217498779297,-50.607658386230469,-50.469085693359375,-50.325702667236328,-50.215614318847656,-50.054386138916016,-49.882129669189453,-49.751258850097656,-49.674625396728516,-49.679908752441406,-49.781082153320312,-49.870277404785156,-49.875679016113281,-49.777862548828125,-49.693328857421875,-49.569740295410156,-49.438930511474609,-49.321491241455078,-49.191574096679688,-49.009124755859375,-48.757736206054688,-48.543857574462891,-48.303306579589844,-47.945549011230469,-47.460170745849609,-46.907699584960938,-46.497020721435547,-46.089225769042969,-45.637969970703125,-45.279884338378906,-44.892189025878906,-44.446762084960938,-44.132453918457031,-43.780189514160156,-43.482063293457031,-43.321437835693359,-43.353061676025391,-43.244327545166016,-42.987247467041016,-42.608627319335938,-42.358913421630859,-42.009513854980469,-41.452392578125000,-41.204170227050781,-40.889373779296875,-40.646209716796875,-40.316852569580078,-39.948547363281250,-39.592338562011719,-39.454933166503906,-39.160148620605469,-39.297901153564453,-39.527225494384766,-39.528709411621094,-38.958381652832031,-38.230293273925781,-37.166633605957031,-36.086055755615234,-34.490791320800781,-33.325988769531250,-31.546855926513672,-30.592660903930664,-29.778514862060547,-28.239929199218750,-27.054336547851562,-25.931299209594727,-25.324762344360352,-25.096635818481445,-25.069858551025391,-25.619445800781250,-25.845470428466797,-25.879436492919922,-26.531436920166016,-25.952388763427734,-24.961254119873047,-24.619287490844727,-23.676107406616211,-23.082775115966797,-22.640615463256836,-21.654020309448242,-20.690792083740234,-19.498722076416016,-17.829992294311523,-16.978027343750000,-16.267404556274414,-15.569509506225586,-14.653918266296387,-14.057525634765625,-13.699838638305664,-13.794576644897461,-13.805027961730957,-13.681455612182617,-13.931604385375977,-13.866586685180664,-13.919921875000000,-13.952379226684570,-14.379379272460938,-15.393339157104492,-16.495792388916016,-16.509565353393555,-16.221313476562500,-16.596227645874023,-17.175960540771484,-17.725448608398438,-17.892278671264648,-17.732812881469727,-17.991504669189453,-18.666355133056641,-19.379356384277344,-19.890642166137695,-20.680105209350586,-21.403625488281250,-22.253734588623047,-22.652368545532227,-22.937086105346680,-23.165739059448242,-23.141756057739258,-23.653043746948242,-24.561275482177734,-25.928401947021484,-27.427532196044922,-28.800933837890625,-30.805568695068359,-32.944400787353516,-35.068122863769531,-36.879806518554688,-39.314571380615234,-40.358291625976562,-40.855712890625000,-41.623893737792969,-42.453498840332031,-43.457435607910156,-44.183921813964844,-44.866928100585938,-46.002479553222656,-46.733722686767578,-47.565814971923828,-48.027465820312500,-48.459095001220703,-48.745777130126953,-48.810604095458984,-49.080879211425781,-49.023090362548828,-49.010112762451172,-49.543785095214844,-49.674278259277344,-49.362060546875000,-49.517990112304688,-50.053813934326172,-50.562461853027344,-50.932411193847656,-51.055702209472656,-51.120494842529297,-51.033206939697266,-50.678211212158203,-50.777706146240234,-50.721382141113281,-50.789360046386719,-50.492675781250000,-50.272270202636719,-49.588924407958984,-49.385208129882812,-48.896587371826172,-48.128162384033203,-48.086441040039062,-48.232414245605469,-48.081401824951172,-47.835826873779297,-47.981586456298828,-48.102592468261719,-48.082134246826172,-47.827816009521484,-47.462882995605469,-47.167896270751953,-47.101036071777344,-47.137855529785156,-47.196399688720703,-47.291534423828125,-47.261787414550781,-47.247467041015625,-47.429450988769531,-47.596660614013672,-47.723590850830078,-47.794429779052734,-47.945312500000000,-48.122020721435547,-48.145374298095703,-48.180030822753906,-48.526817321777344,-48.853527069091797,-49.200805664062500,-49.531883239746094,-49.775428771972656,-49.928024291992188,-50.005260467529297,-50.038917541503906,-50.199817657470703,-50.313545227050781,-50.362487792968750,-50.512783050537109,-50.657024383544922,-50.664710998535156,-50.371891021728516,-50.120754241943359,-50.197990417480469,-50.359123229980469,-50.413871765136719,-50.491436004638672,-50.500682830810547,-50.468086242675781,-50.320789337158203,-50.132858276367188,-49.941570281982422,-49.845909118652344,-49.714374542236328,-49.438545227050781,-49.196781158447266,-49.005241394042969,-48.796081542968750,-48.493064880371094,-48.137832641601562,-47.667640686035156,-46.908561706542969,-45.939430236816406,-44.846118927001953,-43.860435485839844,-43.032802581787109,-42.375495910644531,-41.751251220703125,-40.846908569335938,-39.805156707763672,-38.777496337890625,-37.298713684082031,-35.741638183593750,-34.423225402832031,-33.544929504394531,-32.738952636718750,-31.749567031860352,-30.947772979736328,-30.223791122436523,-29.347965240478516,-28.473804473876953,-27.618076324462891,-26.819305419921875,-25.829845428466797,-24.629840850830078,-23.074291229248047,-21.568767547607422,-20.463062286376953,-19.511192321777344,-18.538787841796875,-17.874797821044922,-17.556112289428711,-17.359170913696289,-17.123243331909180,-16.772033691406250,-16.402669906616211,-15.904808044433594,-15.496319770812988,-14.885223388671875,-14.387751579284668,-14.178442001342773,-14.167597770690918,-14.166656494140625,-14.256276130676270,-14.239812850952148,-14.089826583862305,-13.933133125305176,-13.752734184265137,-13.682685852050781,-13.674341201782227,-13.655924797058105,-13.539480209350586,-13.275865554809570,-13.007432937622070,-12.787562370300293,-12.629456520080566,-12.453958511352539,-12.326979637145996,-12.170848846435547,-12.171597480773926,-12.130119323730469,-12.077615737915039,-12.182085037231445,-12.200670242309570,-12.096662521362305,-11.895204544067383,-11.939291000366211,-11.991496086120605,-11.954568862915039,-11.953677177429199,-11.939281463623047,-11.914628982543945,-11.934655189514160,-11.961053848266602,-11.824185371398926,-11.637101173400879,-11.466890335083008,-11.351442337036133,-11.245120048522949,-11.254056930541992,-11.543699264526367,-11.695901870727539,-11.638618469238281,-11.806823730468750,-12.073351860046387,-12.446632385253906,-12.716729164123535,-13.289631843566895,-14.205843925476074,-14.765408515930176,-15.597648620605469,-15.793492317199707,-16.293956756591797,-16.694738388061523,-17.283016204833984,-17.982448577880859,-18.811626434326172,-19.336597442626953,-19.732349395751953,-20.165451049804688,-21.021572113037109,-22.316112518310547,-23.356937408447266,-24.457849502563477,-25.806356430053711,-26.762567520141602,-28.114986419677734,-29.048160552978516,-29.549137115478516,-30.828060150146484,-32.106090545654297,-32.971179962158203,-33.803665161132812,-34.760471343994141,-35.660327911376953,-36.716075897216797,-37.632698059082031,-38.284038543701172,-39.001232147216797,-39.898300170898438,-40.461372375488281,-40.906585693359375,-41.484931945800781,-41.954353332519531,-42.446990966796875,-42.918827056884766,-43.371772766113281,-43.893669128417969,-44.329566955566406,-44.707313537597656,-44.841133117675781,-44.740283966064453,-44.247230529785156,-43.561645507812500,-43.043800354003906,-42.130245208740234,-40.843589782714844,-39.290863037109375,-38.123592376708984,-37.550651550292969,-36.620830535888672,-35.761268615722656,-34.572544097900391,-33.745910644531250,-34.199901580810547,-34.192619323730469,-34.200508117675781,-34.580738067626953,-35.117492675781250,-35.922607421875000,-37.075004577636719,-37.311790466308594,-37.760047912597656,-38.512519836425781,-38.790531158447266,-38.865467071533203,-38.693046569824219,-38.711483001708984,-38.929439544677734,-38.956291198730469,-38.963493347167969,-39.095489501953125,-39.488594055175781,-39.869735717773438,-39.798713684082031,-39.800865173339844,-40.219181060791016,-40.684116363525391,-41.493358612060547,-42.469333648681641,-43.337879180908203,-44.496345520019531,-46.443149566650391,-48.053840637207031,-49.727169036865234,-51.017272949218750,-51.632976531982422,-51.593406677246094,-51.762474060058594,-51.761413574218750,-51.104286193847656,-50.774932861328125,-49.798927307128906,-49.323440551757812,-48.892803192138672,-48.893367767333984,-48.417320251464844,-47.568946838378906,-46.917865753173828,-46.422229766845703,-45.651641845703125,-44.882896423339844,-44.295818328857422,-43.404003143310547,-41.835289001464844,-40.221000671386719,-37.985881805419922,-35.373542785644531,-33.105266571044922,-31.698938369750977,-30.730356216430664,-29.025659561157227,-27.995269775390625,-27.098852157592773,-26.618961334228516,-25.480777740478516,-24.069744110107422,-23.776687622070312,-23.197408676147461,-22.721481323242188,-22.251386642456055,-21.608303070068359,-21.325098037719727,-20.642858505249023,-20.936126708984375,-21.802850723266602,-22.684993743896484,-23.330268859863281,-24.394279479980469,-24.389692306518555,-24.779293060302734,-24.782308578491211,-26.013381958007812,-26.559225082397461,-27.051244735717773,-27.412607192993164,-26.110927581787109,-25.155445098876953,-24.808837890625000,-24.533885955810547,-24.557756423950195,-23.463405609130859,-23.383998870849609,-23.453653335571289,-23.368755340576172,-23.777101516723633,-23.974849700927734,-24.357997894287109,-24.963953018188477,-26.947866439819336,-28.006402969360352,-29.242650985717773,-30.674808502197266,-32.074562072753906,-34.155353546142578,-35.289764404296875,-36.692115783691406,-38.060966491699219,-38.390689849853516,-38.960716247558594,-40.178070068359375,-40.503356933593750,-40.136760711669922,-39.965408325195312,-39.785247802734375,-39.160675048828125,-38.665180206298828,-38.129627227783203,-37.443328857421875,-36.690116882324219,-36.713359832763672,-36.507659912109375,-36.446243286132812,-37.048618316650391,-37.761615753173828,-38.426181793212891,-38.615119934082031,-38.427001953125000,-38.215282440185547,-38.148406982421875,-38.131389617919922,-38.248458862304688,-38.245227813720703,-38.405418395996094,-38.803974151611328,-39.695987701416016,-40.450126647949219,-40.641548156738281,-40.999172210693359,-41.320564270019531,-41.731822967529297,-42.403026580810547,-42.958644866943359,-43.214946746826172,-43.806587219238281,-44.563335418701172,-45.310703277587891,-45.825492858886719,-46.259845733642578,-46.987701416015625,-47.665538787841797,-48.203834533691406,-48.774589538574219,-49.469520568847656,-50.135105133056641,-50.712554931640625,-51.321483612060547,-51.802227020263672,-52.251728057861328,-52.766162872314453,-53.413322448730469,-53.926525115966797,-54.333209991455078,-54.625854492187500,-54.832836151123047,-55.150177001953125,-55.549446105957031,-55.910877227783203,-56.192451477050781,-56.340526580810547,-56.443206787109375,-56.535278320312500,-56.576709747314453,-56.551643371582031,-56.530719757080078,-56.459953308105469,-56.408416748046875,-56.390449523925781,-56.353527069091797,-56.311706542968750,-56.314842224121094,-56.324035644531250,-56.343975067138672,-56.333923339843750,-56.282279968261719,-56.239330291748047,-56.162395477294922,-56.078449249267578,-56.003303527832031,-55.937206268310547,-55.910850524902344,-55.897724151611328,-55.879413604736328,-55.846599578857422,-55.810493469238281,-55.738883972167969,-55.645133972167969,-55.522193908691406,-55.391796112060547,-55.262580871582031,-55.135414123535156,-55.048236846923828,-54.968658447265625,-54.888984680175781,-54.815235137939453,-54.742443084716797,-54.679126739501953,-54.632274627685547,-54.588397979736328,-54.552379608154297,-54.528839111328125,-54.502105712890625,-54.467712402343750,-54.431770324707031,-54.394641876220703,-54.354228973388672,-54.312156677246094,-54.278400421142578,-54.243164062500000,-54.199382781982422,-54.135536193847656,-54.065391540527344,-53.941474914550781,-53.832153320312500,-53.723762512207031,-53.712951660156250,-53.704414367675781,-53.697704315185547,-53.618324279785156,-53.540874481201172,-53.465362548828125,-53.385833740234375,-53.314159393310547,-53.244987487792969,-53.128875732421875,-52.998748779296875,-52.865947723388672,-52.790332794189453,-52.728233337402344,-52.663414001464844,-52.634620666503906,-52.591407775878906,-52.547382354736328,-52.480255126953125,-52.403465270996094,-52.325885772705078,-52.225048065185547,-52.129516601562500,-52.033897399902344,-51.946453094482422,-51.863025665283203,-51.779621124267578,-51.757465362548828,-51.745311737060547,-51.733146667480469,-51.688743591308594,-51.643562316894531,-51.598365783691406,-51.607460021972656,-51.615589141845703,-51.623706817626953,-51.629669189453125,-51.635383605957031,-51.641113281250000]
    ex234_class2_mean = [-33,-36,-39,-42,-45,-47,-48,-48,-48,-48,-49,-49,-49,-49,-49,-50,-50,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-50,-50,-50,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-52,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-50,-49,-49,-49,-49,-48,-48,-47,-47,-47,-46,-46,-46,-46,-46,-45,-45,-45,-44,-44,-43,-43,-43,-42,-42,-41,-42,-41,-41,-40,-40,-39,-38,-39,-38,-38,-37,-37,-37,-37,-37,-37,-37,-36,-35,-35,-35,-34,-34,-34,-34,-33,-32,-31,-30,-28,-28,-27,-26,-24,-22,-19,-18,-18,-18,-19,-18,-17,-16,-15,-14,-13,-13,-12,-11,-10,-9,-8,-8,-7,-7,-7,-7,-7,-7,-7,-7,-9,-11,-11,-12,-12,-13,-15,-17,-18,-19,-20,-21,-22,-24,-24,-26,-27,-27,-28,-29,-30,-31,-33,-34,-35,-36,-37,-39,-40,-41,-42,-42,-43,-44,-44,-44,-44,-44,-45,-45,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-46,-45,-45,-45,-45,-45,-45,-45,-45,-44,-44,-43,-42,-41,-40,-39,-38,-37,-36,-34,-33,-33,-32,-32,-31,-30,-29,-29,-28,-27,-26,-25,-24,-23,-22,-21,-21,-19,-18,-17,-15,-14,-11,-9,-7,-7,-6,-6,-6,-6,-6,-6,-6,-7,-7,-7,-7,-7,-7,-7,-7,-8,-8,-7,-7,-7,-7,-7,-8,-7,-7,-6,-6,-6,-6,-6,-6,-5,-5,-4,-4,-3,-3,-3,-3,-3,-3,-3,-3,-3,-4,-4,-5,-5,-6,-7,-8,-9,-10,-11,-13,-16,-17,-20,-22,-23,-25,-26,-27,-29,-29,-29,-30,-31,-32,-33,-33,-33,-34,-35,-35,-36,-36,-36,-37,-37,-37,-38,-38,-38,-38,-39,-39,-39,-40,-40,-40,-41,-41,-42,-42,-42,-43,-43,-44,-44,-44,-45,-45,-45,-46,-46,-47,-47,-48,-48,-48,-48,-48,-48,-48,-47,-47,-47,-47,-47,-46,-46,-46,-45,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36,-34,-33,-31,-29,-27,-26,-25,-24,-23,-23,-23,-23,-22,-22,-22,-21,-21,-21,-21,-22,-22,-22,-22,-22,-21,-22,-23,-23,-23,-22,-22,-21,-21,-20,-20,-20,-19,-19,-19,-20,-20,-20,-19,-19,-18,-16,-16,-16,-17,-16,-16,-16,-15,-15,-15,-14,-15,-15,-15,-15,-16,-18,-19,-20,-21,-22,-23,-23,-23,-22,-21,-21,-21,-20,-20,-19,-19,-19,-19,-19,-19,-20,-20,-20,-21,-21,-22,-23,-23,-23,-23,-24,-25,-25,-25,-26,-26,-26,-26,-27,-28,-28,-29,-29,-30,-31,-31,-32,-33,-33,-33,-34,-33,-34,-34,-35,-36,-37,-38,-38,-39,-40,-40,-42,-43,-44,-45,-46,-46,-47,-48,-48,-49,-49,-49,-50,-51,-51,-51,-51,-52,-52,-52,-52,-52,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-54,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-52,-51,-51,-51,-51,-51,-51,-51]
    
    for iter in range(3):
        start_frame = exercises_points[0][iter][0]
        end_frame = exercises_points[0][iter][1]
        found_idx = find_nearest(identity[0], identityTF_numpy[0][start_frame])
        found_idx_end = find_nearest(identity[0], identityTF_numpy[0][end_frame])
        #found_idx = find_nearest(interpolated_X_test[0][:250], transformed_input_numpy[0][start_frame])
        #print(find_nearest(transformed_input_numpy[0][:300], -37))
        #print(find_nearest(identity[0][:300], identityTF_numpy[0][214]))
        print(found_idx, interpolated_X_test[0][0][found_idx[1]])
        plt.plot(ex234_class2_mean, label="Mean", color ="black")
        markers = ['v', '^']
        x_frames = [start_frame, end_frame]
        y_frames = [ex234_class2_mean[start_frame], ex234_class2_mean[end_frame]]
        plt.scatter(x_frames, y_frames, c='red', marker='o')
        
        #plt.plot(nb, identityTF_numpy[0], label="Aligned", color ="green")
        #y_frames = [identityTF_numpy[0][start_frame], identityTF_numpy[0][end_frame]]
        #plt.scatter(x_frames, y_frames, c='green', marker='D')
        #
        #plt.plot(identity[0][0], label="Orig", color ="blue")
        #found_idx = find_nearest(identity[0], identityTF_numpy[0][start_frame])
        #found_idx_end = find_nearest(identity[0], identityTF_numpy[0][end_frame])
        #plt.scatter(found_idx[0], found_idx[1], c='blue', marker='x')
        #plt.scatter(found_idx_end[0], found_idx_end[1], c='blue', marker='x')
    
        plt.plot(nb, transformed_input_numpy[0], label="Aligned", color ="green")
        plt.scatter(start_frame, transformed_input_numpy[0][start_frame], c='red', marker='h')
        plt.scatter(end_frame, transformed_input_numpy[0][end_frame], c='red', marker='h')
    
        plt.plot(interpolated_X_test[0][0], label="Orig", color ="blue")
        plt.scatter(found_idx[0], interpolated_X_test[0][0][found_idx[0]], c='red', marker='^')
        plt.scatter(found_idx_end[0], interpolated_X_test[0][0][found_idx_end[0]], c='red', marker='^')
    
        plt.legend()
        plt.show()
    np.savetxt(f'identity_{dataset}.txt', identity[0][0], delimiter=',',fmt='%d')
    np.savetxt(f'identity_aligned_{dataset}.txt', identityTF_numpy[0], delimiter=',',fmt='%1.15f')

    print("done")


if __name__ == "__main__":
    args = argparser()
    inference(args, dataset_name=args.dataset)

