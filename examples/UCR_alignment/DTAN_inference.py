import os
import glob
import sys
module_path = os.path.abspath(os.path.join('..\\..'))
module_path1 = os.path.abspath(os.path.join('..\\..\\..'))
module_path2 = os.path.abspath(os.path.join('..\\..\\DTAN'))
import argparse
import torch
import numpy as np
import matplotlib.pyplot as plt

if module_path not in sys.path:
    sys.path.append(module_path)
if module_path1 not in sys.path:
    sys.path.append(module_path1)
if module_path2 not in sys.path:
    sys.path.append(module_path2)

from models.train_utils import ExperimentsManager, DTAN_args
from DTAN.DTAN_layer import DTAN
from UCR_alignment import argparser
import csv
from scipy.signal import find_peaks, butter, filtfilt
from tslearn.preprocessing import TimeSeriesResampler
from sklearn.metrics import mean_squared_error
import statistics
import math
from re import search
sys.path.append("D:\\M.Sc_study\\github\\thesis\\ilan_computerVisionML_AI\\mediapipe_eval\\data\\")
from process_data import gen_feature

SIGNAL_LENGTH = 800

PLOT_ENABLED = 1
FWRITE_ENABLED = 0
output_feature_vec = "features_ex234full_wNoseHipDist.txt"

ex234_class2_mean = np.array([[-54.912395477294922,-54.887119293212891,-54.861858367919922,-54.836585998535156,-54.811298370361328,-54.785888671875000,-54.760711669921875,-54.745605468750000,-54.738735198974609,-54.732044219970703,-54.721035003662109,-54.706596374511719,-54.693729400634766,-54.678699493408203,-54.662151336669922,-54.643516540527344,-54.624263763427734,-54.606094360351562,-54.588577270507812,-54.574214935302734,-54.561672210693359,-54.548900604248047,-54.535942077636719,-54.522579193115234,-54.508045196533203,-54.492195129394531,-54.474876403808594,-54.456401824951172,-54.441574096679688,-54.427963256835938,-54.415485382080078,-54.402183532714844,-54.388778686523438,-54.374004364013672,-54.360248565673828,-54.347434997558594,-54.335655212402344,-54.324848175048828,-54.315250396728516,-54.305374145507812,-54.295536041259766,-54.285606384277344,-54.276088714599609,-54.262336730957031,-54.248046875000000,-54.234497070312500,-54.221042633056641,-54.207763671875000,-54.199657440185547,-54.191204071044922,-54.183536529541016,-54.175441741943359,-54.166179656982422,-54.156780242919922,-54.147975921630859,-54.140232086181641,-54.132587432861328,-54.127540588378906,-54.122562408447266,-54.118412017822266,-54.114192962646484,-54.110221862792969,-54.106773376464844,-54.102973937988281,-54.099315643310547,-54.094512939453125,-54.088787078857422,-54.082050323486328,-54.075538635253906,-54.069450378417969,-54.063243865966797,-54.057369232177734,-54.051490783691406,-54.047176361083984,-54.042091369628906,-54.036571502685547,-54.031127929687500,-54.025550842285156,-54.019393920898438,-54.011260986328125,-54.002635955810547,-53.992855072021484,-53.980476379394531,-53.967460632324219,-53.954833984375000,-53.943199157714844,-53.931125640869141,-53.920387268066406,-53.913467407226562,-53.907089233398438,-53.903636932373047,-53.901096343994141,-53.898010253906250,-53.895473480224609,-53.892913818359375,-53.889759063720703,-53.887763977050781,-53.886051177978516,-53.884151458740234,-53.882762908935547,-53.881980895996094,-53.880863189697266,-53.879226684570312,-53.877002716064453,-53.874736785888672,-53.872608184814453,-53.870136260986328,-53.867656707763672,-53.865200042724609,-53.861171722412109,-53.856384277343750,-53.851474761962891,-53.846469879150391,-53.841594696044922,-53.837768554687500,-53.834041595458984,-53.830154418945312,-53.827327728271484,-53.824718475341797,-53.822166442871094,-53.819396972656250,-53.817173004150391,-53.815650939941406,-53.812644958496094,-53.808624267578125,-53.804302215576172,-53.799232482910156,-53.792926788330078,-53.785182952880859,-53.777462005615234,-53.770229339599609,-53.763759613037109,-53.756633758544922,-53.749649047851562,-53.743389129638672,-53.737384796142578,-53.731571197509766,-53.726364135742188,-53.721046447753906,-53.716018676757812,-53.711723327636719,-53.707317352294922,-53.703556060791016,-53.700748443603516,-53.697395324707031,-53.693458557128906,-53.690849304199219,-53.688270568847656,-53.685264587402344,-53.682262420654297,-53.679241180419922,-53.676349639892578,-53.673622131347656,-53.671409606933594,-53.668952941894531,-53.665851593017578,-53.662734985351562,-53.661540985107422,-53.659515380859375,-53.659267425537109,-53.659191131591797,-53.658077239990234,-53.656349182128906,-53.651355743408203,-53.643585205078125,-53.635795593261719,-53.626148223876953,-53.613185882568359,-53.599838256835938,-53.585609436035156,-53.570816040039062,-53.554870605468750,-53.539791107177734,-53.528495788574219,-53.517318725585938,-53.510101318359375,-53.505165100097656,-53.500122070312500,-53.495960235595703,-53.491371154785156,-53.485004425048828,-53.477462768554688,-53.465476989746094,-53.450569152832031,-53.435588836669922,-53.421432495117188,-53.404823303222656,-53.385604858398438,-53.364807128906250,-53.344367980957031,-53.327529907226562,-53.312091827392578,-53.298542022705078,-53.291049957275391,-53.285034179687500,-53.279834747314453,-53.274456024169922,-53.269573211669922,-53.263969421386719,-53.259319305419922,-53.255901336669922,-53.252429962158203,-53.246204376220703,-53.237361907958984,-53.222087860107422,-53.207805633544922,-53.197891235351562,-53.188793182373047,-53.171997070312500,-53.148967742919922,-53.126552581787109,-53.115520477294922,-53.106212615966797,-53.091354370117188,-53.066265106201172,-53.039066314697266,-53.017562866210938,-53.002117156982422,-52.988582611083984,-52.973491668701172,-52.955097198486328,-52.933315277099609,-52.913650512695312,-52.905666351318359,-52.898494720458984,-52.892845153808594,-52.881088256835938,-52.873580932617188,-52.877758026123047,-52.881965637207031,-52.888198852539062,-52.892578125000000,-52.896606445312500,-52.894931793212891,-52.892463684082031,-52.885375976562500,-52.873493194580078,-52.858150482177734,-52.844337463378906,-52.838897705078125,-52.837104797363281,-52.828613281250000,-52.805221557617188,-52.778186798095703,-52.754161834716797,-52.720359802246094,-52.686328887939453,-52.659183502197266,-52.653358459472656,-52.621803283691406,-52.588615417480469,-52.567695617675781,-52.552371978759766,-52.513938903808594,-52.467716217041016,-52.430313110351562,-52.388751983642578,-52.320354461669922,-52.270385742187500,-52.225658416748047,-52.184570312500000,-52.159507751464844,-52.117546081542969,-52.071453094482422,-52.031314849853516,-51.987850189208984,-51.938354492187500,-51.894233703613281,-51.830139160156250,-51.744022369384766,-51.656665802001953,-51.563503265380859,-51.460361480712891,-51.363491058349609,-51.263313293457031,-51.152580261230469,-51.048686981201172,-50.974269866943359,-50.911037445068359,-50.826477050781250,-50.756996154785156,-50.659591674804688,-50.552410125732422,-50.454875946044922,-50.357067108154297,-50.256874084472656,-50.141895294189453,-50.010292053222656,-49.875350952148438,-49.729667663574219,-49.576816558837891,-49.419757843017578,-49.262981414794922,-49.139339447021484,-49.014602661132812,-48.904491424560547,-48.777111053466797,-48.606010437011719,-48.435527801513672,-48.276683807373047,-48.127296447753906,-47.980064392089844,-47.833545684814453,-47.673980712890625,-47.498233795166016,-47.307239532470703,-47.110843658447266,-46.886646270751953,-46.647109985351562,-46.422405242919922,-46.184078216552734,-45.934226989746094,-45.692977905273438,-45.432132720947266,-45.174354553222656,-44.890907287597656,-44.602375030517578,-44.332637786865234,-44.062168121337891,-43.781963348388672,-43.474620819091797,-43.161712646484375,-42.845985412597656,-42.528148651123047,-42.212558746337891,-41.885330200195312,-41.547164916992188,-41.210693359375000,-40.885467529296875,-40.562576293945312,-40.256565093994141,-39.932033538818359,-39.604793548583984,-39.272552490234375,-38.909301757812500,-38.517517089843750,-38.156814575195312,-37.809463500976562,-37.471179962158203,-37.137310028076172,-36.771003723144531,-36.365123748779297,-35.902671813964844,-35.421672821044922,-34.910354614257812,-34.339630126953125,-33.746047973632812,-33.173576354980469,-32.647624969482422,-32.107051849365234,-31.519123077392578,-30.985935211181641,-30.422058105468750,-29.836790084838867,-29.242158889770508,-28.613958358764648,-28.017213821411133,-27.455751419067383,-26.879508972167969,-26.234361648559570,-25.611633300781250,-25.050880432128906,-24.490226745605469,-23.860795974731445,-23.195337295532227,-22.522199630737305,-21.848001480102539,-21.202907562255859,-20.578701019287109,-19.988220214843750,-19.425790786743164,-18.882579803466797,-18.334674835205078,-17.774417877197266,-17.171983718872070,-16.580371856689453,-15.986240386962891,-15.404841423034668,-14.862066268920898,-14.300154685974121,-13.737215995788574,-13.175838470458984,-12.616444587707520,-12.098246574401855,-11.571227073669434,-11.065671920776367,-10.600976943969727,-10.139617919921875,-9.645271301269531,-9.154519081115723,-8.650514602661133,-8.199810028076172,-7.815958023071289,-7.452412605285645,-7.124792575836182,-6.815603733062744,-6.504616737365723,-6.162858009338379,-5.790024280548096,-5.446753501892090,-5.136656761169434,-4.828695774078369,-4.565013408660889,-4.351739406585693,-4.170156478881836,-4.011196136474609,-3.867655754089355,-3.748766660690308,-3.658476352691650,-3.572677612304688,-3.460507154464722,-3.357185363769531,-3.250992298126221,-3.133094072341919,-2.938410043716431,-2.730198383331299,-2.555971860885620,-2.399153470993042,-2.241688013076782,-2.098327875137329,-1.962128400802612,-1.822000384330750,-1.661295771598816,-1.492465615272522,-1.335305452346802,-1.194364786148071,-1.084503054618835,-0.997315585613251,-0.917861163616180,-0.865597903728485,-0.828778028488159,-0.803827762603760,-0.776134073734283,-0.744932889938354,-0.740107953548431,-0.755195379257202,-0.762534499168396,-0.772886097431183,-0.812405467033386,-0.866000950336456,-0.905605137348175,-0.931271255016327,-0.961690068244934,-1.000764012336731,-1.046558976173401,-1.078985214233398,-1.132739901542664,-1.197230577468872,-1.281005978584290,-1.379612088203430,-1.463162422180176,-1.507607579231262,-1.552023530006409,-1.597123265266418,-1.636391282081604,-1.690895915031433,-1.735951185226440,-1.769762992858887,-1.800212144851685,-1.828166246414185,-1.854852199554443,-1.876586675643921,-1.898451089859009,-1.923711538314819,-1.944038033485413,-1.943997263908386,-1.958856582641602,-1.983642816543579,-2.013885021209717,-2.051555156707764,-2.102218627929688,-2.197436094284058,-2.316930055618286,-2.434287548065186,-2.544811725616455,-2.661620855331421,-2.789701223373413,-2.920058250427246,-3.049659729003906,-3.187317848205566,-3.310427427291870,-3.375691413879395,-3.423758506774902,-3.487057924270630,-3.555698871612549,-3.625658988952637,-3.706215858459473,-3.761449098587036,-3.790397405624390,-3.812332391738892,-3.823425292968750,-3.808557033538818,-3.803860902786255,-3.823807001113892,-3.879531145095825,-3.944971799850464,-3.969629526138306,-3.968930721282959,-3.969494342803955,-3.948501348495483,-3.950651645660400,-3.964333534240723,-3.960989475250244,-3.964169979095459,-3.955817937850952,-3.947220087051392,-3.949578523635864,-3.976626634597778,-3.972972869873047,-3.952782392501831,-3.915101528167725,-3.872095823287964,-3.833684206008911,-3.797381877899170,-3.779043674468994,-3.757640123367310,-3.776784181594849,-3.805270671844482,-3.809720993041992,-3.814469337463379,-3.852092742919922,-3.909806013107300,-3.963366985321045,-3.992319107055664,-4.014924526214600,-4.040279388427734,-4.027639389038086,-3.987214565277100,-3.957388401031494,-3.932076454162598,-3.899275064468384,-3.886312484741211,-3.876655578613281,-3.854738235473633,-3.791628599166870,-3.705718040466309,-3.690243721008301,-3.706938743591309,-3.706118345260620,-3.688243389129639,-3.616727352142334,-3.511440992355347,-3.402806997299194,-3.298174619674683,-3.183025836944580,-3.061317920684814,-3.019694089889526,-2.992300510406494,-2.986166238784790,-2.871604204177856,-2.779083013534546,-2.754312276840210,-2.794124126434326,-2.832082748413086,-2.751963138580322,-2.716826200485229,-2.775320529937744,-2.929482936859131,-3.091369152069092,-3.245195150375366,-3.384593963623047,-3.504414558410645,-3.668747663497925,-3.848278045654297,-4.108495235443115,-4.506964206695557,-4.959867477416992,-5.353964328765869,-5.655378818511963,-5.929183959960938,-6.426780700683594,-7.111298084259033,-7.706236839294434,-8.136401176452637,-8.715195655822754,-9.361445426940918,-10.138720512390137,-11.051081657409668,-12.081626892089844,-12.953159332275391,-13.954274177551270,-14.856128692626953,-15.716116905212402,-16.618463516235352,-17.461601257324219,-18.285446166992188,-19.193582534790039,-20.258583068847656,-21.467420578002930,-22.654396057128906,-23.792995452880859,-24.699470520019531,-25.613660812377930,-26.707475662231445,-27.717071533203125,-28.576826095581055,-29.459865570068359,-30.351184844970703,-31.367042541503906,-32.238384246826172,-33.003757476806641,-33.849182128906250,-34.606761932373047,-35.331012725830078,-36.003696441650391,-36.591438293457031,-37.204227447509766,-37.816154479980469,-38.275146484375000,-38.883083343505859,-39.496341705322266,-40.047229766845703,-40.644657135009766,-41.217079162597656,-41.709983825683594,-42.167137145996094,-42.656673431396484,-43.145568847656250,-43.595241546630859,-44.076828002929688,-44.486640930175781,-44.854534149169922,-45.214061737060547,-45.542873382568359,-45.831161499023438,-46.097225189208984,-46.355098724365234,-46.631584167480469,-46.929389953613281,-47.192562103271484,-47.422634124755859,-47.660568237304688,-47.900154113769531,-48.117084503173828,-48.343955993652344,-48.585247039794922,-48.809978485107422,-49.014633178710938,-49.197696685791016,-49.413509368896484,-49.619228363037109,-49.809665679931641,-49.982841491699219,-50.166206359863281,-50.355266571044922,-50.527065277099609,-50.692413330078125,-50.862640380859375,-51.012306213378906,-51.152954101562500,-51.316543579101562,-51.479084014892578,-51.618671417236328,-51.756992340087891,-51.891056060791016,-52.032623291015625,-52.166091918945312,-52.295669555664062,-52.424057006835938,-52.547599792480469,-52.643196105957031,-52.718811035156250,-52.781173706054688,-52.831604003906250,-52.868202209472656,-52.909793853759766,-52.959373474121094,-53.008670806884766,-53.048507690429688,-53.078208923339844,-53.094173431396484,-53.113849639892578,-53.126937866210938,-53.130233764648438,-53.143711090087891,-53.152004241943359,-53.160629272460938,-53.186038970947266,-53.222545623779297,-53.257896423339844,-53.299438476562500,-53.346046447753906,-53.403869628906250,-53.464111328125000,-53.520538330078125,-53.575702667236328,-53.630809783935547,-53.682090759277344,-53.726280212402344,-53.769458770751953,-53.818641662597656,-53.862529754638672,-53.895374298095703,-53.921703338623047,-53.937320709228516,-53.942928314208984,-53.965518951416016,-54.014347076416016,-54.074367523193359,-54.139682769775391,-54.201385498046875,-54.255203247070312,-54.296443939208984,-54.331619262695312,-54.360755920410156,-54.386035919189453,-54.403984069824219,-54.415313720703125,-54.423118591308594,-54.438400268554688,-54.454811096191406,-54.469768524169922,-54.485874176025391,-54.501483917236328,-54.513156890869141,-54.526493072509766,-54.539966583251953,-54.551651000976562,-54.563667297363281,-54.577606201171875,-54.590221405029297,-54.601604461669922,-54.616180419921875,-54.633068084716797,-54.650753021240234,-54.672252655029297,-54.689155578613281,-54.704349517822266,-54.718055725097656,-54.730628967285156,-54.739967346191406,-54.744804382324219,-54.740600585937500,-54.733631134033203,-54.729217529296875,-54.728137969970703,-54.726741790771484,-54.727241516113281,-54.725429534912109,-54.719127655029297,-54.707752227783203,-54.696640014648438,-54.685775756835938,-54.678840637207031,-54.678997039794922,-54.679542541503906,-54.678646087646484,-54.676635742187500,-54.677852630615234,-54.677162170410156,-54.674827575683594,-54.668762207031250,-54.657897949218750,-54.645671844482422,-54.634487152099609,-54.621902465820312,-54.606517791748047,-54.589775085449219,-54.573276519775391,-54.558200836181641,-54.545909881591797,-54.534362792968750,-54.519649505615234,-54.503715515136719,-54.489456176757812,-54.476966857910156,-54.465045928955078,-54.452812194824219,-54.442779541015625,-54.435852050781250,-54.430873870849609,-54.430480957031250,-54.431598663330078,-54.431358337402344,-54.428508758544922,-54.425254821777344,-54.418182373046875,-54.408939361572266,-54.402080535888672,-54.393135070800781,-54.385929107666016,-54.383449554443359,-54.381893157958984,-54.378978729248047,-54.372295379638672,-54.368309020996094,-54.365436553955078,-54.363807678222656,-54.361373901367188,-54.360279083251953,-54.361206054687500,-54.362628936767578,-54.365203857421875,-54.366744995117188,-54.363403320312500,-54.351417541503906,-54.339645385742188,-54.327747344970703,-54.316013336181641,-54.304267883300781],
[-54.912395477294922,-54.887119293212891,-54.861858367919922,-54.836585998535156,-54.811298370361328,-54.785888671875000,-54.760711669921875,-54.745605468750000,-54.738735198974609,-54.732044219970703,-54.721035003662109,-54.706596374511719,-54.693729400634766,-54.678699493408203,-54.662151336669922,-54.643516540527344,-54.624263763427734,-54.606094360351562,-54.588577270507812,-54.574214935302734,-54.561672210693359,-54.548900604248047,-54.535942077636719,-54.522579193115234,-54.508045196533203,-54.492195129394531,-54.474876403808594,-54.456401824951172,-54.441574096679688,-54.427963256835938,-54.415485382080078,-54.402183532714844,-54.388778686523438,-54.374004364013672,-54.360248565673828,-54.347434997558594,-54.335655212402344,-54.324848175048828,-54.315250396728516,-54.305374145507812,-54.295536041259766,-54.285606384277344,-54.276088714599609,-54.262336730957031,-54.248046875000000,-54.234497070312500,-54.221042633056641,-54.207763671875000,-54.199657440185547,-54.191204071044922,-54.183536529541016,-54.175441741943359,-54.166179656982422,-54.156780242919922,-54.147975921630859,-54.140232086181641,-54.132587432861328,-54.127540588378906,-54.122562408447266,-54.118412017822266,-54.114192962646484,-54.110221862792969,-54.106773376464844,-54.102973937988281,-54.099315643310547,-54.094512939453125,-54.088787078857422,-54.082050323486328,-54.075538635253906,-54.069450378417969,-54.063243865966797,-54.057369232177734,-54.051490783691406,-54.047176361083984,-54.042091369628906,-54.036571502685547,-54.031127929687500,-54.025550842285156,-54.019393920898438,-54.011260986328125,-54.002635955810547,-53.992855072021484,-53.980476379394531,-53.967460632324219,-53.954833984375000,-53.943199157714844,-53.931125640869141,-53.920387268066406,-53.913467407226562,-53.907089233398438,-53.903636932373047,-53.901096343994141,-53.898010253906250,-53.895473480224609,-53.892913818359375,-53.889759063720703,-53.887763977050781,-53.886051177978516,-53.884151458740234,-53.882762908935547,-53.881980895996094,-53.880863189697266,-53.879226684570312,-53.877002716064453,-53.874736785888672,-53.872608184814453,-53.870136260986328,-53.867656707763672,-53.865200042724609,-53.861171722412109,-53.856384277343750,-53.851474761962891,-53.846469879150391,-53.841594696044922,-53.837768554687500,-53.834041595458984,-53.830154418945312,-53.827327728271484,-53.824718475341797,-53.822166442871094,-53.819396972656250,-53.817173004150391,-53.815650939941406,-53.812644958496094,-53.808624267578125,-53.804302215576172,-53.799232482910156,-53.792926788330078,-53.785182952880859,-53.777462005615234,-53.770229339599609,-53.763759613037109,-53.756633758544922,-53.749649047851562,-53.743389129638672,-53.737384796142578,-53.731571197509766,-53.726364135742188,-53.721046447753906,-53.716018676757812,-53.711723327636719,-53.707317352294922,-53.703556060791016,-53.700748443603516,-53.697395324707031,-53.693458557128906,-53.690849304199219,-53.688270568847656,-53.685264587402344,-53.682262420654297,-53.679241180419922,-53.676349639892578,-53.673622131347656,-53.671409606933594,-53.668952941894531,-53.665851593017578,-53.662734985351562,-53.661540985107422,-53.659515380859375,-53.659267425537109,-53.659191131591797,-53.658077239990234,-53.656349182128906,-53.651355743408203,-53.643585205078125,-53.635795593261719,-53.626148223876953,-53.613185882568359,-53.599838256835938,-53.585609436035156,-53.570816040039062,-53.554870605468750,-53.539791107177734,-53.528495788574219,-53.517318725585938,-53.510101318359375,-53.505165100097656,-53.500122070312500,-53.495960235595703,-53.491371154785156,-53.485004425048828,-53.477462768554688,-53.465476989746094,-53.450569152832031,-53.435588836669922,-53.421432495117188,-53.404823303222656,-53.385604858398438,-53.364807128906250,-53.344367980957031,-53.327529907226562,-53.312091827392578,-53.298542022705078,-53.291049957275391,-53.285034179687500,-53.279834747314453,-53.274456024169922,-53.269573211669922,-53.263969421386719,-53.259319305419922,-53.255901336669922,-53.252429962158203,-53.246204376220703,-53.237361907958984,-53.222087860107422,-53.207805633544922,-53.197891235351562,-53.188793182373047,-53.171997070312500,-53.148967742919922,-53.126552581787109,-53.115520477294922,-53.106212615966797,-53.091354370117188,-53.066265106201172,-53.039066314697266,-53.017562866210938,-53.002117156982422,-52.988582611083984,-52.973491668701172,-52.955097198486328,-52.933315277099609,-52.913650512695312,-52.905666351318359,-52.898494720458984,-52.892845153808594,-52.881088256835938,-52.873580932617188,-52.877758026123047,-52.881965637207031,-52.888198852539062,-52.892578125000000,-52.896606445312500,-52.894931793212891,-52.892463684082031,-52.885375976562500,-52.873493194580078,-52.858150482177734,-52.844337463378906,-52.838897705078125,-52.837104797363281,-52.828613281250000,-52.805221557617188,-52.778186798095703,-52.754161834716797,-52.720359802246094,-52.686328887939453,-52.659183502197266,-52.653358459472656,-52.621803283691406,-52.588615417480469,-52.567695617675781,-52.552371978759766,-52.513938903808594,-52.467716217041016,-52.430313110351562,-52.388751983642578,-52.320354461669922,-52.270385742187500,-52.225658416748047,-52.184570312500000,-52.159507751464844,-52.117546081542969,-52.071453094482422,-52.031314849853516,-51.987850189208984,-51.938354492187500,-51.894233703613281,-51.830139160156250,-51.744022369384766,-51.656665802001953,-51.563503265380859,-51.460361480712891,-51.363491058349609,-51.263313293457031,-51.152580261230469,-51.048686981201172,-50.974269866943359,-50.911037445068359,-50.826477050781250,-50.756996154785156,-50.659591674804688,-50.552410125732422,-50.454875946044922,-50.357067108154297,-50.256874084472656,-50.141895294189453,-50.010292053222656,-49.875350952148438,-49.729667663574219,-49.576816558837891,-49.419757843017578,-49.262981414794922,-49.139339447021484,-49.014602661132812,-48.904491424560547,-48.777111053466797,-48.606010437011719,-48.435527801513672,-48.276683807373047,-48.127296447753906,-47.980064392089844,-47.833545684814453,-47.673980712890625,-47.498233795166016,-47.307239532470703,-47.110843658447266,-46.886646270751953,-46.647109985351562,-46.422405242919922,-46.184078216552734,-45.934226989746094,-45.692977905273438,-45.432132720947266,-45.174354553222656,-44.890907287597656,-44.602375030517578,-44.332637786865234,-44.062168121337891,-43.781963348388672,-43.474620819091797,-43.161712646484375,-42.845985412597656,-42.528148651123047,-42.212558746337891,-41.885330200195312,-41.547164916992188,-41.210693359375000,-40.885467529296875,-40.562576293945312,-40.256565093994141,-39.932033538818359,-39.604793548583984,-39.272552490234375,-38.909301757812500,-38.517517089843750,-38.156814575195312,-37.809463500976562,-37.471179962158203,-37.137310028076172,-36.771003723144531,-36.365123748779297,-35.902671813964844,-35.421672821044922,-34.910354614257812,-34.339630126953125,-33.746047973632812,-33.173576354980469,-32.647624969482422,-32.107051849365234,-31.519123077392578,-30.985935211181641,-30.422058105468750,-29.836790084838867,-29.242158889770508,-28.613958358764648,-28.017213821411133,-27.455751419067383,-26.879508972167969,-26.234361648559570,-25.611633300781250,-25.050880432128906,-24.490226745605469,-23.860795974731445,-23.195337295532227,-22.522199630737305,-21.848001480102539,-21.202907562255859,-20.578701019287109,-19.988220214843750,-19.425790786743164,-18.882579803466797,-18.334674835205078,-17.774417877197266,-17.171983718872070,-16.580371856689453,-15.986240386962891,-15.404841423034668,-14.862066268920898,-14.300154685974121,-13.737215995788574,-13.175838470458984,-12.616444587707520,-12.098246574401855,-11.571227073669434,-11.065671920776367,-10.600976943969727,-10.139617919921875,-9.645271301269531,-9.154519081115723,-8.650514602661133,-8.199810028076172,-7.815958023071289,-7.452412605285645,-7.124792575836182,-6.815603733062744,-6.504616737365723,-6.162858009338379,-5.790024280548096,-5.446753501892090,-5.136656761169434,-4.828695774078369,-4.565013408660889,-4.351739406585693,-4.170156478881836,-4.011196136474609,-3.867655754089355,-3.748766660690308,-3.658476352691650,-3.572677612304688,-3.460507154464722,-3.357185363769531,-3.250992298126221,-3.133094072341919,-2.938410043716431,-2.730198383331299,-2.555971860885620,-2.399153470993042,-2.241688013076782,-2.098327875137329,-1.962128400802612,-1.822000384330750,-1.661295771598816,-1.492465615272522,-1.335305452346802,-1.194364786148071,-1.084503054618835,-0.997315585613251,-0.917861163616180,-0.865597903728485,-0.828778028488159,-0.803827762603760,-0.776134073734283,-0.744932889938354,-0.740107953548431,-0.755195379257202,-0.762534499168396,-0.772886097431183,-0.812405467033386,-0.866000950336456,-0.905605137348175,-0.931271255016327,-0.961690068244934,-1.000764012336731,-1.046558976173401,-1.078985214233398,-1.132739901542664,-1.197230577468872,-1.281005978584290,-1.379612088203430,-1.463162422180176,-1.507607579231262,-1.552023530006409,-1.597123265266418,-1.636391282081604,-1.690895915031433,-1.735951185226440,-1.769762992858887,-1.800212144851685,-1.828166246414185,-1.854852199554443,-1.876586675643921,-1.898451089859009,-1.923711538314819,-1.944038033485413,-1.943997263908386,-1.958856582641602,-1.983642816543579,-2.013885021209717,-2.051555156707764,-2.102218627929688,-2.197436094284058,-2.316930055618286,-2.434287548065186,-2.544811725616455,-2.661620855331421,-2.789701223373413,-2.920058250427246,-3.049659729003906,-3.187317848205566,-3.310427427291870,-3.375691413879395,-3.423758506774902,-3.487057924270630,-3.555698871612549,-3.625658988952637,-3.706215858459473,-3.761449098587036,-3.790397405624390,-3.812332391738892,-3.823425292968750,-3.808557033538818,-3.803860902786255,-3.823807001113892,-3.879531145095825,-3.944971799850464,-3.969629526138306,-3.968930721282959,-3.969494342803955,-3.948501348495483,-3.950651645660400,-3.964333534240723,-3.960989475250244,-3.964169979095459,-3.955817937850952,-3.947220087051392,-3.949578523635864,-3.976626634597778,-3.972972869873047,-3.952782392501831,-3.915101528167725,-3.872095823287964,-3.833684206008911,-3.797381877899170,-3.779043674468994,-3.757640123367310,-3.776784181594849,-3.805270671844482,-3.809720993041992,-3.814469337463379,-3.852092742919922,-3.909806013107300,-3.963366985321045,-3.992319107055664,-4.014924526214600,-4.040279388427734,-4.027639389038086,-3.987214565277100,-3.957388401031494,-3.932076454162598,-3.899275064468384,-3.886312484741211,-3.876655578613281,-3.854738235473633,-3.791628599166870,-3.705718040466309,-3.690243721008301,-3.706938743591309,-3.706118345260620,-3.688243389129639,-3.616727352142334,-3.511440992355347,-3.402806997299194,-3.298174619674683,-3.183025836944580,-3.061317920684814,-3.019694089889526,-2.992300510406494,-2.986166238784790,-2.871604204177856,-2.779083013534546,-2.754312276840210,-2.794124126434326,-2.832082748413086,-2.751963138580322,-2.716826200485229,-2.775320529937744,-2.929482936859131,-3.091369152069092,-3.245195150375366,-3.384593963623047,-3.504414558410645,-3.668747663497925,-3.848278045654297,-4.108495235443115,-4.506964206695557,-4.959867477416992,-5.353964328765869,-5.655378818511963,-5.929183959960938,-6.426780700683594,-7.111298084259033,-7.706236839294434,-8.136401176452637,-8.715195655822754,-9.361445426940918,-10.138720512390137,-11.051081657409668,-12.081626892089844,-12.953159332275391,-13.954274177551270,-14.856128692626953,-15.716116905212402,-16.618463516235352,-17.461601257324219,-18.285446166992188,-19.193582534790039,-20.258583068847656,-21.467420578002930,-22.654396057128906,-23.792995452880859,-24.699470520019531,-25.613660812377930,-26.707475662231445,-27.717071533203125,-28.576826095581055,-29.459865570068359,-30.351184844970703,-31.367042541503906,-32.238384246826172,-33.003757476806641,-33.849182128906250,-34.606761932373047,-35.331012725830078,-36.003696441650391,-36.591438293457031,-37.204227447509766,-37.816154479980469,-38.275146484375000,-38.883083343505859,-39.496341705322266,-40.047229766845703,-40.644657135009766,-41.217079162597656,-41.709983825683594,-42.167137145996094,-42.656673431396484,-43.145568847656250,-43.595241546630859,-44.076828002929688,-44.486640930175781,-44.854534149169922,-45.214061737060547,-45.542873382568359,-45.831161499023438,-46.097225189208984,-46.355098724365234,-46.631584167480469,-46.929389953613281,-47.192562103271484,-47.422634124755859,-47.660568237304688,-47.900154113769531,-48.117084503173828,-48.343955993652344,-48.585247039794922,-48.809978485107422,-49.014633178710938,-49.197696685791016,-49.413509368896484,-49.619228363037109,-49.809665679931641,-49.982841491699219,-50.166206359863281,-50.355266571044922,-50.527065277099609,-50.692413330078125,-50.862640380859375,-51.012306213378906,-51.152954101562500,-51.316543579101562,-51.479084014892578,-51.618671417236328,-51.756992340087891,-51.891056060791016,-52.032623291015625,-52.166091918945312,-52.295669555664062,-52.424057006835938,-52.547599792480469,-52.643196105957031,-52.718811035156250,-52.781173706054688,-52.831604003906250,-52.868202209472656,-52.909793853759766,-52.959373474121094,-53.008670806884766,-53.048507690429688,-53.078208923339844,-53.094173431396484,-53.113849639892578,-53.126937866210938,-53.130233764648438,-53.143711090087891,-53.152004241943359,-53.160629272460938,-53.186038970947266,-53.222545623779297,-53.257896423339844,-53.299438476562500,-53.346046447753906,-53.403869628906250,-53.464111328125000,-53.520538330078125,-53.575702667236328,-53.630809783935547,-53.682090759277344,-53.726280212402344,-53.769458770751953,-53.818641662597656,-53.862529754638672,-53.895374298095703,-53.921703338623047,-53.937320709228516,-53.942928314208984,-53.965518951416016,-54.014347076416016,-54.074367523193359,-54.139682769775391,-54.201385498046875,-54.255203247070312,-54.296443939208984,-54.331619262695312,-54.360755920410156,-54.386035919189453,-54.403984069824219,-54.415313720703125,-54.423118591308594,-54.438400268554688,-54.454811096191406,-54.469768524169922,-54.485874176025391,-54.501483917236328,-54.513156890869141,-54.526493072509766,-54.539966583251953,-54.551651000976562,-54.563667297363281,-54.577606201171875,-54.590221405029297,-54.601604461669922,-54.616180419921875,-54.633068084716797,-54.650753021240234,-54.672252655029297,-54.689155578613281,-54.704349517822266,-54.718055725097656,-54.730628967285156,-54.739967346191406,-54.744804382324219,-54.740600585937500,-54.733631134033203,-54.729217529296875,-54.728137969970703,-54.726741790771484,-54.727241516113281,-54.725429534912109,-54.719127655029297,-54.707752227783203,-54.696640014648438,-54.685775756835938,-54.678840637207031,-54.678997039794922,-54.679542541503906,-54.678646087646484,-54.676635742187500,-54.677852630615234,-54.677162170410156,-54.674827575683594,-54.668762207031250,-54.657897949218750,-54.645671844482422,-54.634487152099609,-54.621902465820312,-54.606517791748047,-54.589775085449219,-54.573276519775391,-54.558200836181641,-54.545909881591797,-54.534362792968750,-54.519649505615234,-54.503715515136719,-54.489456176757812,-54.476966857910156,-54.465045928955078,-54.452812194824219,-54.442779541015625,-54.435852050781250,-54.430873870849609,-54.430480957031250,-54.431598663330078,-54.431358337402344,-54.428508758544922,-54.425254821777344,-54.418182373046875,-54.408939361572266,-54.402080535888672,-54.393135070800781,-54.385929107666016,-54.383449554443359,-54.381893157958984,-54.378978729248047,-54.372295379638672,-54.368309020996094,-54.365436553955078,-54.363807678222656,-54.361373901367188,-54.360279083251953,-54.361206054687500,-54.362628936767578,-54.365203857421875,-54.366744995117188,-54.363403320312500,-54.351417541503906,-54.339645385742188,-54.327747344970703,-54.316013336181641,-54.304267883300781],
[-54.912395477294922,-54.887119293212891,-54.861858367919922,-54.836585998535156,-54.811298370361328,-54.785888671875000,-54.760711669921875,-54.745605468750000,-54.738735198974609,-54.732044219970703,-54.721035003662109,-54.706596374511719,-54.693729400634766,-54.678699493408203,-54.662151336669922,-54.643516540527344,-54.624263763427734,-54.606094360351562,-54.588577270507812,-54.574214935302734,-54.561672210693359,-54.548900604248047,-54.535942077636719,-54.522579193115234,-54.508045196533203,-54.492195129394531,-54.474876403808594,-54.456401824951172,-54.441574096679688,-54.427963256835938,-54.415485382080078,-54.402183532714844,-54.388778686523438,-54.374004364013672,-54.360248565673828,-54.347434997558594,-54.335655212402344,-54.324848175048828,-54.315250396728516,-54.305374145507812,-54.295536041259766,-54.285606384277344,-54.276088714599609,-54.262336730957031,-54.248046875000000,-54.234497070312500,-54.221042633056641,-54.207763671875000,-54.199657440185547,-54.191204071044922,-54.183536529541016,-54.175441741943359,-54.166179656982422,-54.156780242919922,-54.147975921630859,-54.140232086181641,-54.132587432861328,-54.127540588378906,-54.122562408447266,-54.118412017822266,-54.114192962646484,-54.110221862792969,-54.106773376464844,-54.102973937988281,-54.099315643310547,-54.094512939453125,-54.088787078857422,-54.082050323486328,-54.075538635253906,-54.069450378417969,-54.063243865966797,-54.057369232177734,-54.051490783691406,-54.047176361083984,-54.042091369628906,-54.036571502685547,-54.031127929687500,-54.025550842285156,-54.019393920898438,-54.011260986328125,-54.002635955810547,-53.992855072021484,-53.980476379394531,-53.967460632324219,-53.954833984375000,-53.943199157714844,-53.931125640869141,-53.920387268066406,-53.913467407226562,-53.907089233398438,-53.903636932373047,-53.901096343994141,-53.898010253906250,-53.895473480224609,-53.892913818359375,-53.889759063720703,-53.887763977050781,-53.886051177978516,-53.884151458740234,-53.882762908935547,-53.881980895996094,-53.880863189697266,-53.879226684570312,-53.877002716064453,-53.874736785888672,-53.872608184814453,-53.870136260986328,-53.867656707763672,-53.865200042724609,-53.861171722412109,-53.856384277343750,-53.851474761962891,-53.846469879150391,-53.841594696044922,-53.837768554687500,-53.834041595458984,-53.830154418945312,-53.827327728271484,-53.824718475341797,-53.822166442871094,-53.819396972656250,-53.817173004150391,-53.815650939941406,-53.812644958496094,-53.808624267578125,-53.804302215576172,-53.799232482910156,-53.792926788330078,-53.785182952880859,-53.777462005615234,-53.770229339599609,-53.763759613037109,-53.756633758544922,-53.749649047851562,-53.743389129638672,-53.737384796142578,-53.731571197509766,-53.726364135742188,-53.721046447753906,-53.716018676757812,-53.711723327636719,-53.707317352294922,-53.703556060791016,-53.700748443603516,-53.697395324707031,-53.693458557128906,-53.690849304199219,-53.688270568847656,-53.685264587402344,-53.682262420654297,-53.679241180419922,-53.676349639892578,-53.673622131347656,-53.671409606933594,-53.668952941894531,-53.665851593017578,-53.662734985351562,-53.661540985107422,-53.659515380859375,-53.659267425537109,-53.659191131591797,-53.658077239990234,-53.656349182128906,-53.651355743408203,-53.643585205078125,-53.635795593261719,-53.626148223876953,-53.613185882568359,-53.599838256835938,-53.585609436035156,-53.570816040039062,-53.554870605468750,-53.539791107177734,-53.528495788574219,-53.517318725585938,-53.510101318359375,-53.505165100097656,-53.500122070312500,-53.495960235595703,-53.491371154785156,-53.485004425048828,-53.477462768554688,-53.465476989746094,-53.450569152832031,-53.435588836669922,-53.421432495117188,-53.404823303222656,-53.385604858398438,-53.364807128906250,-53.344367980957031,-53.327529907226562,-53.312091827392578,-53.298542022705078,-53.291049957275391,-53.285034179687500,-53.279834747314453,-53.274456024169922,-53.269573211669922,-53.263969421386719,-53.259319305419922,-53.255901336669922,-53.252429962158203,-53.246204376220703,-53.237361907958984,-53.222087860107422,-53.207805633544922,-53.197891235351562,-53.188793182373047,-53.171997070312500,-53.148967742919922,-53.126552581787109,-53.115520477294922,-53.106212615966797,-53.091354370117188,-53.066265106201172,-53.039066314697266,-53.017562866210938,-53.002117156982422,-52.988582611083984,-52.973491668701172,-52.955097198486328,-52.933315277099609,-52.913650512695312,-52.905666351318359,-52.898494720458984,-52.892845153808594,-52.881088256835938,-52.873580932617188,-52.877758026123047,-52.881965637207031,-52.888198852539062,-52.892578125000000,-52.896606445312500,-52.894931793212891,-52.892463684082031,-52.885375976562500,-52.873493194580078,-52.858150482177734,-52.844337463378906,-52.838897705078125,-52.837104797363281,-52.828613281250000,-52.805221557617188,-52.778186798095703,-52.754161834716797,-52.720359802246094,-52.686328887939453,-52.659183502197266,-52.653358459472656,-52.621803283691406,-52.588615417480469,-52.567695617675781,-52.552371978759766,-52.513938903808594,-52.467716217041016,-52.430313110351562,-52.388751983642578,-52.320354461669922,-52.270385742187500,-52.225658416748047,-52.184570312500000,-52.159507751464844,-52.117546081542969,-52.071453094482422,-52.031314849853516,-51.987850189208984,-51.938354492187500,-51.894233703613281,-51.830139160156250,-51.744022369384766,-51.656665802001953,-51.563503265380859,-51.460361480712891,-51.363491058349609,-51.263313293457031,-51.152580261230469,-51.048686981201172,-50.974269866943359,-50.911037445068359,-50.826477050781250,-50.756996154785156,-50.659591674804688,-50.552410125732422,-50.454875946044922,-50.357067108154297,-50.256874084472656,-50.141895294189453,-50.010292053222656,-49.875350952148438,-49.729667663574219,-49.576816558837891,-49.419757843017578,-49.262981414794922,-49.139339447021484,-49.014602661132812,-48.904491424560547,-48.777111053466797,-48.606010437011719,-48.435527801513672,-48.276683807373047,-48.127296447753906,-47.980064392089844,-47.833545684814453,-47.673980712890625,-47.498233795166016,-47.307239532470703,-47.110843658447266,-46.886646270751953,-46.647109985351562,-46.422405242919922,-46.184078216552734,-45.934226989746094,-45.692977905273438,-45.432132720947266,-45.174354553222656,-44.890907287597656,-44.602375030517578,-44.332637786865234,-44.062168121337891,-43.781963348388672,-43.474620819091797,-43.161712646484375,-42.845985412597656,-42.528148651123047,-42.212558746337891,-41.885330200195312,-41.547164916992188,-41.210693359375000,-40.885467529296875,-40.562576293945312,-40.256565093994141,-39.932033538818359,-39.604793548583984,-39.272552490234375,-38.909301757812500,-38.517517089843750,-38.156814575195312,-37.809463500976562,-37.471179962158203,-37.137310028076172,-36.771003723144531,-36.365123748779297,-35.902671813964844,-35.421672821044922,-34.910354614257812,-34.339630126953125,-33.746047973632812,-33.173576354980469,-32.647624969482422,-32.107051849365234,-31.519123077392578,-30.985935211181641,-30.422058105468750,-29.836790084838867,-29.242158889770508,-28.613958358764648,-28.017213821411133,-27.455751419067383,-26.879508972167969,-26.234361648559570,-25.611633300781250,-25.050880432128906,-24.490226745605469,-23.860795974731445,-23.195337295532227,-22.522199630737305,-21.848001480102539,-21.202907562255859,-20.578701019287109,-19.988220214843750,-19.425790786743164,-18.882579803466797,-18.334674835205078,-17.774417877197266,-17.171983718872070,-16.580371856689453,-15.986240386962891,-15.404841423034668,-14.862066268920898,-14.300154685974121,-13.737215995788574,-13.175838470458984,-12.616444587707520,-12.098246574401855,-11.571227073669434,-11.065671920776367,-10.600976943969727,-10.139617919921875,-9.645271301269531,-9.154519081115723,-8.650514602661133,-8.199810028076172,-7.815958023071289,-7.452412605285645,-7.124792575836182,-6.815603733062744,-6.504616737365723,-6.162858009338379,-5.790024280548096,-5.446753501892090,-5.136656761169434,-4.828695774078369,-4.565013408660889,-4.351739406585693,-4.170156478881836,-4.011196136474609,-3.867655754089355,-3.748766660690308,-3.658476352691650,-3.572677612304688,-3.460507154464722,-3.357185363769531,-3.250992298126221,-3.133094072341919,-2.938410043716431,-2.730198383331299,-2.555971860885620,-2.399153470993042,-2.241688013076782,-2.098327875137329,-1.962128400802612,-1.822000384330750,-1.661295771598816,-1.492465615272522,-1.335305452346802,-1.194364786148071,-1.084503054618835,-0.997315585613251,-0.917861163616180,-0.865597903728485,-0.828778028488159,-0.803827762603760,-0.776134073734283,-0.744932889938354,-0.740107953548431,-0.755195379257202,-0.762534499168396,-0.772886097431183,-0.812405467033386,-0.866000950336456,-0.905605137348175,-0.931271255016327,-0.961690068244934,-1.000764012336731,-1.046558976173401,-1.078985214233398,-1.132739901542664,-1.197230577468872,-1.281005978584290,-1.379612088203430,-1.463162422180176,-1.507607579231262,-1.552023530006409,-1.597123265266418,-1.636391282081604,-1.690895915031433,-1.735951185226440,-1.769762992858887,-1.800212144851685,-1.828166246414185,-1.854852199554443,-1.876586675643921,-1.898451089859009,-1.923711538314819,-1.944038033485413,-1.943997263908386,-1.958856582641602,-1.983642816543579,-2.013885021209717,-2.051555156707764,-2.102218627929688,-2.197436094284058,-2.316930055618286,-2.434287548065186,-2.544811725616455,-2.661620855331421,-2.789701223373413,-2.920058250427246,-3.049659729003906,-3.187317848205566,-3.310427427291870,-3.375691413879395,-3.423758506774902,-3.487057924270630,-3.555698871612549,-3.625658988952637,-3.706215858459473,-3.761449098587036,-3.790397405624390,-3.812332391738892,-3.823425292968750,-3.808557033538818,-3.803860902786255,-3.823807001113892,-3.879531145095825,-3.944971799850464,-3.969629526138306,-3.968930721282959,-3.969494342803955,-3.948501348495483,-3.950651645660400,-3.964333534240723,-3.960989475250244,-3.964169979095459,-3.955817937850952,-3.947220087051392,-3.949578523635864,-3.976626634597778,-3.972972869873047,-3.952782392501831,-3.915101528167725,-3.872095823287964,-3.833684206008911,-3.797381877899170,-3.779043674468994,-3.757640123367310,-3.776784181594849,-3.805270671844482,-3.809720993041992,-3.814469337463379,-3.852092742919922,-3.909806013107300,-3.963366985321045,-3.992319107055664,-4.014924526214600,-4.040279388427734,-4.027639389038086,-3.987214565277100,-3.957388401031494,-3.932076454162598,-3.899275064468384,-3.886312484741211,-3.876655578613281,-3.854738235473633,-3.791628599166870,-3.705718040466309,-3.690243721008301,-3.706938743591309,-3.706118345260620,-3.688243389129639,-3.616727352142334,-3.511440992355347,-3.402806997299194,-3.298174619674683,-3.183025836944580,-3.061317920684814,-3.019694089889526,-2.992300510406494,-2.986166238784790,-2.871604204177856,-2.779083013534546,-2.754312276840210,-2.794124126434326,-2.832082748413086,-2.751963138580322,-2.716826200485229,-2.775320529937744,-2.929482936859131,-3.091369152069092,-3.245195150375366,-3.384593963623047,-3.504414558410645,-3.668747663497925,-3.848278045654297,-4.108495235443115,-4.506964206695557,-4.959867477416992,-5.353964328765869,-5.655378818511963,-5.929183959960938,-6.426780700683594,-7.111298084259033,-7.706236839294434,-8.136401176452637,-8.715195655822754,-9.361445426940918,-10.138720512390137,-11.051081657409668,-12.081626892089844,-12.953159332275391,-13.954274177551270,-14.856128692626953,-15.716116905212402,-16.618463516235352,-17.461601257324219,-18.285446166992188,-19.193582534790039,-20.258583068847656,-21.467420578002930,-22.654396057128906,-23.792995452880859,-24.699470520019531,-25.613660812377930,-26.707475662231445,-27.717071533203125,-28.576826095581055,-29.459865570068359,-30.351184844970703,-31.367042541503906,-32.238384246826172,-33.003757476806641,-33.849182128906250,-34.606761932373047,-35.331012725830078,-36.003696441650391,-36.591438293457031,-37.204227447509766,-37.816154479980469,-38.275146484375000,-38.883083343505859,-39.496341705322266,-40.047229766845703,-40.644657135009766,-41.217079162597656,-41.709983825683594,-42.167137145996094,-42.656673431396484,-43.145568847656250,-43.595241546630859,-44.076828002929688,-44.486640930175781,-44.854534149169922,-45.214061737060547,-45.542873382568359,-45.831161499023438,-46.097225189208984,-46.355098724365234,-46.631584167480469,-46.929389953613281,-47.192562103271484,-47.422634124755859,-47.660568237304688,-47.900154113769531,-48.117084503173828,-48.343955993652344,-48.585247039794922,-48.809978485107422,-49.014633178710938,-49.197696685791016,-49.413509368896484,-49.619228363037109,-49.809665679931641,-49.982841491699219,-50.166206359863281,-50.355266571044922,-50.527065277099609,-50.692413330078125,-50.862640380859375,-51.012306213378906,-51.152954101562500,-51.316543579101562,-51.479084014892578,-51.618671417236328,-51.756992340087891,-51.891056060791016,-52.032623291015625,-52.166091918945312,-52.295669555664062,-52.424057006835938,-52.547599792480469,-52.643196105957031,-52.718811035156250,-52.781173706054688,-52.831604003906250,-52.868202209472656,-52.909793853759766,-52.959373474121094,-53.008670806884766,-53.048507690429688,-53.078208923339844,-53.094173431396484,-53.113849639892578,-53.126937866210938,-53.130233764648438,-53.143711090087891,-53.152004241943359,-53.160629272460938,-53.186038970947266,-53.222545623779297,-53.257896423339844,-53.299438476562500,-53.346046447753906,-53.403869628906250,-53.464111328125000,-53.520538330078125,-53.575702667236328,-53.630809783935547,-53.682090759277344,-53.726280212402344,-53.769458770751953,-53.818641662597656,-53.862529754638672,-53.895374298095703,-53.921703338623047,-53.937320709228516,-53.942928314208984,-53.965518951416016,-54.014347076416016,-54.074367523193359,-54.139682769775391,-54.201385498046875,-54.255203247070312,-54.296443939208984,-54.331619262695312,-54.360755920410156,-54.386035919189453,-54.403984069824219,-54.415313720703125,-54.423118591308594,-54.438400268554688,-54.454811096191406,-54.469768524169922,-54.485874176025391,-54.501483917236328,-54.513156890869141,-54.526493072509766,-54.539966583251953,-54.551651000976562,-54.563667297363281,-54.577606201171875,-54.590221405029297,-54.601604461669922,-54.616180419921875,-54.633068084716797,-54.650753021240234,-54.672252655029297,-54.689155578613281,-54.704349517822266,-54.718055725097656,-54.730628967285156,-54.739967346191406,-54.744804382324219,-54.740600585937500,-54.733631134033203,-54.729217529296875,-54.728137969970703,-54.726741790771484,-54.727241516113281,-54.725429534912109,-54.719127655029297,-54.707752227783203,-54.696640014648438,-54.685775756835938,-54.678840637207031,-54.678997039794922,-54.679542541503906,-54.678646087646484,-54.676635742187500,-54.677852630615234,-54.677162170410156,-54.674827575683594,-54.668762207031250,-54.657897949218750,-54.645671844482422,-54.634487152099609,-54.621902465820312,-54.606517791748047,-54.589775085449219,-54.573276519775391,-54.558200836181641,-54.545909881591797,-54.534362792968750,-54.519649505615234,-54.503715515136719,-54.489456176757812,-54.476966857910156,-54.465045928955078,-54.452812194824219,-54.442779541015625,-54.435852050781250,-54.430873870849609,-54.430480957031250,-54.431598663330078,-54.431358337402344,-54.428508758544922,-54.425254821777344,-54.418182373046875,-54.408939361572266,-54.402080535888672,-54.393135070800781,-54.385929107666016,-54.383449554443359,-54.381893157958984,-54.378978729248047,-54.372295379638672,-54.368309020996094,-54.365436553955078,-54.363807678222656,-54.361373901367188,-54.360279083251953,-54.361206054687500,-54.362628936767578,-54.365203857421875,-54.366744995117188,-54.363403320312500,-54.351417541503906,-54.339645385742188,-54.327747344970703,-54.316013336181641,-54.304267883300781]])
    
ex234_class2_std = np.array([[4.967250823974609,4.975839614868164,4.988574028015137,5.005420684814453,5.026359558105469,5.049267768859863,5.073655128479004,5.088273525238037,5.093230724334717,5.097934246063232,5.106286048889160,5.117267131805420,5.126485347747803,5.135589122772217,5.139670848846436,5.140980243682861,5.141490936279297,5.142237186431885,5.142951011657715,5.141512393951416,5.138693809509277,5.135926723480225,5.132469654083252,5.128373146057129,5.126749992370605,5.127780437469482,5.132312297821045,5.135107517242432,5.140632152557373,5.145726203918457,5.149401664733887,5.153276443481445,5.157012939453125,5.160775184631348,5.165282726287842,5.170673370361328,5.175803184509277,5.178859710693359,5.181085586547852,5.183277606964111,5.184807300567627,5.185530662536621,5.186439990997314,5.192412376403809,5.201178073883057,5.209831237792969,5.217564582824707,5.224858760833740,5.228829383850098,5.230106830596924,5.228445529937744,5.226670265197754,5.225436210632324,5.225289344787598,5.225309371948242,5.223748683929443,5.222887039184570,5.221627235412598,5.220087051391602,5.219184398651123,5.218540668487549,5.217818737030029,5.216560363769531,5.216374397277832,5.215879917144775,5.215646743774414,5.215500831604004,5.213841438293457,5.211719989776611,5.208801746368408,5.204876422882080,5.201478004455566,5.198093414306641,5.196035385131836,5.192183494567871,5.188688755035400,5.185358524322510,5.182358264923096,5.179678916931152,5.175023078918457,5.170299053192139,5.164783954620361,5.157685756683350,5.151165008544922,5.144761562347412,5.137933731079102,5.131852149963379,5.128170967102051,5.126400947570801,5.124210357666016,5.123268127441406,5.123016357421875,5.122654438018799,5.121860980987549,5.121349811553955,5.121078014373779,5.120461940765381,5.119200706481934,5.117784023284912,5.115952968597412,5.113912582397461,5.111698627471924,5.109211921691895,5.105803966522217,5.102483749389648,5.099180221557617,5.095982074737549,5.093014240264893,5.090205192565918,5.087579250335693,5.085334777832031,5.082771301269531,5.080181598663330,5.078045845031738,5.076187610626221,5.074647426605225,5.073492050170898,5.073952198028564,5.074389934539795,5.075264930725098,5.076209068298340,5.077292442321777,5.078581809997559,5.077623844146729,5.076049327850342,5.074930191040039,5.072295665740967,5.068400382995605,5.065392971038818,5.062444210052490,5.059542655944824,5.055361270904541,5.050138473510742,5.045609474182129,5.040694236755371,5.035823345184326,5.030904769897461,5.025970935821533,5.021399497985840,5.016643047332764,5.011730194091797,5.007132053375244,5.002992630004883,4.999971389770508,4.997459888458252,4.995536327362061,4.991657733917236,4.987415790557861,4.983309745788574,4.978733539581299,4.973758697509766,4.969449043273926,4.964833736419678,4.961253166198730,4.958401679992676,4.955196857452393,4.951777935028076,4.945863723754883,4.939624786376953,4.932638168334961,4.925523757934570,4.916970729827881,4.908766269683838,4.899828433990479,4.893650054931641,4.887586116790771,4.881935596466064,4.871254920959473,4.860715389251709,4.852821350097656,4.842085838317871,4.831295013427734,4.821529865264893,4.815467834472656,4.809595584869385,4.805121421813965,4.796981811523438,4.788822650909424,4.780601501464844,4.773147583007812,4.765107154846191,4.756510734558105,4.749393939971924,4.739176273345947,4.729631423950195,4.721326828002930,4.715672016143799,4.712575912475586,4.715694904327393,4.721944332122803,4.732484340667725,4.744414329528809,4.759511947631836,4.772056579589844,4.782522201538086,4.793728351593018,4.802356719970703,4.803503513336182,4.802701950073242,4.802042484283447,4.802939891815186,4.802793979644775,4.800483226776123,4.797747135162354,4.787921905517578,4.783557891845703,4.792234897613525,4.810376644134521,4.833294868469238,4.857587337493896,4.880250930786133,4.896678924560547,4.910502433776855,4.922914505004883,4.939778804779053,4.963840007781982,4.986626625061035,5.012035369873047,5.039781570434570,5.071947097778320,5.107858657836914,5.144235134124756,5.169886112213135,5.183828353881836,5.198163032531738,5.214128017425537,5.242326259613037,5.270633697509766,5.291644573211670,5.308124542236328,5.321657657623291,5.343873500823975,5.365623950958252,5.379139900207520,5.385998725891113,5.389361858367920,5.391330718994141,5.392048835754395,5.397031307220459,5.407573699951172,5.429773330688477,5.464153766632080,5.502849102020264,5.539356708526611,5.567569732666016,5.591678142547607,5.619302749633789,5.643895149230957,5.660936355590820,5.672740459442139,5.681729793548584,5.695512294769287,5.699346542358398,5.676652908325195,5.660778999328613,5.652897834777832,5.647253036499023,5.657286643981934,5.670133590698242,5.687960624694824,5.695579528808594,5.710960388183594,5.729814052581787,5.741963386535645,5.761099338531494,5.783183574676514,5.799745559692383,5.829602718353271,5.882001399993896,5.937329769134521,6.005683898925781,6.070572376251221,6.129720211029053,6.193808555603027,6.261742591857910,6.324728012084961,6.391581058502197,6.457763671875000,6.513551712036133,6.561433315277100,6.614273548126221,6.673457622528076,6.741276264190674,6.814258575439453,6.887757778167725,6.947128772735596,6.999788761138916,7.046741485595703,7.092483520507812,7.133162498474121,7.174765110015869,7.218038558959961,7.240036487579346,7.300031185150146,7.366593837738037,7.459840774536133,7.538106918334961,7.557877540588379,7.586197853088379,7.635463714599609,7.683093547821045,7.741381168365479,7.807598114013672,7.875003814697266,7.951243400573730,8.025416374206543,8.095326423645020,8.156127929687500,8.202201843261719,8.269275665283203,8.352782249450684,8.442217826843262,8.530278205871582,8.621592521667480,8.741000175476074,8.889998435974121,9.029843330383301,9.154765129089355,9.288268089294434,9.404001235961914,9.516563415527344,9.624922752380371,9.695422172546387,9.759167671203613,9.785219192504883,9.827726364135742,9.919754981994629,10.063990592956543,10.199877738952637,10.305718421936035,10.364016532897949,10.444787979125977,10.594749450683594,10.786584854125977,11.032354354858398,11.263174057006836,11.435145378112793,11.617639541625977,11.821256637573242,12.030835151672363,12.180034637451172,12.310956001281738,12.422966957092285,12.526993751525879,12.612919807434082,12.637093544006348,12.709236145019531,12.803256034851074,12.909494400024414,12.960175514221191,12.965800285339355,12.926865577697754,12.885206222534180,12.801857948303223,12.699404716491699,12.638473510742188,12.596208572387695,12.544191360473633,12.475368499755859,12.441953659057617,12.409146308898926,12.372008323669434,12.369309425354004,12.369669914245605,12.320661544799805,12.261816978454590,12.193796157836914,12.153768539428711,12.144495010375977,12.155532836914062,12.194373130798340,12.217905998229980,12.199621200561523,12.130863189697266,12.051774024963379,11.967187881469727,11.865825653076172,11.782656669616699,11.718454360961914,11.678381919860840,11.637665748596191,11.619432449340820,11.623924255371094,11.640707969665527,11.657012939453125,11.664640426635742,11.637484550476074,11.563156127929688,11.438295364379883,11.335732460021973,11.235480308532715,11.133006095886230,11.051515579223633,10.998445510864258,10.959739685058594,10.904208183288574,10.844265937805176,10.780322074890137,10.737465858459473,10.704674720764160,10.664954185485840,10.626180648803711,10.571082115173340,10.499642372131348,10.409967422485352,10.294527053833008,10.177969932556152,10.067762374877930,9.962399482727051,9.872960090637207,9.765267372131348,9.645450592041016,9.528663635253906,9.418033599853516,9.230538368225098,8.992281913757324,8.790047645568848,8.617024421691895,8.479837417602539,8.374382972717285,8.285324096679688,8.152411460876465,7.962856292724609,7.744034290313721,7.534538745880127,7.343095779418945,7.225693225860596,7.140231609344482,7.060421466827393,6.981357097625732,6.887928485870361,6.797703266143799,6.736209392547607,6.682074069976807,6.626247882843018,6.563285350799561,6.507894039154053,6.456830501556396,6.419803619384766,6.375713348388672,6.308655738830566,6.249334812164307,6.225196361541748,6.222601890563965,6.221872329711914,6.201769351959229,6.156675815582275,6.108387947082520,6.079218387603760,6.066800117492676,6.054319858551025,5.988941192626953,5.916278362274170,5.855669021606445,5.819603443145752,5.797814846038818,5.773691654205322,5.737600326538086,5.708529472351074,5.691607475280762,5.669276237487793,5.641047954559326,5.604503631591797,5.554409503936768,5.501516342163086,5.428918361663818,5.362350463867188,5.302621841430664,5.264510631561279,5.226120471954346,5.176902294158936,5.146851062774658,5.119312763214111,5.120434761047363,5.147938728332520,5.158279895782471,5.090811729431152,5.030261039733887,4.997862339019775,5.034145355224609,5.097373962402344,5.026574134826660,4.914320468902588,4.844807624816895,4.798109054565430,4.782680034637451,4.829996109008789,4.851108551025391,4.780149936676025,4.699617385864258,4.626884460449219,4.540028572082520,4.442646503448486,4.347493171691895,4.335340499877930,4.352534294128418,4.303999423980713,4.231421470642090,4.187922954559326,4.164196968078613,4.161715984344482,4.190659046173096,4.196704864501953,4.184081554412842,4.174217700958252,4.158133983612061,4.146560668945312,4.148229122161865,4.131157398223877,4.108975887298584,4.035457611083984,3.921121597290039,3.824353218078613,3.763711214065552,3.745786905288696,3.755051612854004,3.820370435714722,3.819959640502930,3.796881198883057,3.716379404067993,3.702134609222412,3.763025522232056,3.852619886398315,3.899652957916260,3.890413761138916,3.841056108474731,3.758039712905884,3.712119579315186,3.675970077514648,3.642591714859009,3.671782016754150,3.730222463607788,3.820172548294067,3.927342653274536,3.979892253875732,4.022863864898682,4.147732734680176,4.274947643280029,4.330847740173340,4.378749370574951,4.399205684661865,4.434498310089111,4.476202487945557,4.536744117736816,4.533425331115723,4.442706108093262,4.389002323150635,4.400430679321289,4.462772846221924,4.477552890777588,4.505796432495117,4.601646423339844,4.733809947967529,4.934429168701172,4.815742969512939,4.673584938049316,4.719190597534180,4.900602340698242,5.270493507385254,5.650305747985840,5.860616683959961,6.025705814361572,6.211218833923340,6.426295757293701,6.766153812408447,7.210365772247314,7.701918125152588,8.163361549377441,8.317446708679199,8.331032752990723,8.410386085510254,8.591182708740234,8.757582664489746,8.873217582702637,9.085048675537109,9.305638313293457,9.686599731445312,10.112338066101074,10.772291183471680,11.077277183532715,11.528722763061523,11.682065010070801,11.910692214965820,12.190708160400391,12.598879814147949,12.922795295715332,13.168378829956055,13.569618225097656,14.023753166198730,14.434729576110840,14.963546752929688,15.212292671203613,15.383792877197266,15.665549278259277,15.959129333496094,16.045928955078125,16.183153152465820,16.211273193359375,16.166589736938477,16.068443298339844,15.968262672424316,15.847568511962891,15.692958831787109,15.553006172180176,15.349737167358398,15.148150444030762,14.992700576782227,14.790844917297363,14.533531188964844,14.356827735900879,14.072775840759277,13.746688842773438,13.488968849182129,13.229818344116211,12.999344825744629,12.844485282897949,12.701662063598633,12.474884986877441,12.242556571960449,12.109392166137695,11.982228279113770,11.862581253051758,11.725476264953613,11.552036285400391,11.299898147583008,11.061742782592773,10.856314659118652,10.674612998962402,10.498144149780273,10.338490486145020,10.153298377990723,9.957339286804199,9.799833297729492,9.659771919250488,9.542078018188477,9.410679817199707,9.275730133056641,9.139700889587402,9.003455162048340,8.872183799743652,8.730531692504883,8.576863288879395,8.414276123046875,8.258967399597168,8.150975227355957,8.056682586669922,7.969748973846436,7.859433650970459,7.723304748535156,7.580330848693848,7.429591178894043,7.294116973876953,7.177041053771973,7.064651489257812,6.951172351837158,6.835390090942383,6.721502304077148,6.615817546844482,6.523767471313477,6.462653636932373,6.384339809417725,6.294068336486816,6.194204807281494,6.105031490325928,6.020966529846191,5.944420337677002,5.870284557342529,5.790615081787109,5.711858272552490,5.636820793151855,5.571314334869385,5.515630722045898,5.463914871215820,5.403617382049561,5.337999820709229,5.274630069732666,5.205309867858887,5.137258529663086,5.077537536621094,5.022357463836670,4.967229366302490,4.903712272644043,4.840069293975830,4.784541130065918,4.748188495635986,4.732269287109375,4.730269908905029,4.733112335205078,4.740354061126709,4.745314598083496,4.754373073577881,4.765054225921631,4.773756027221680,4.784882545471191,4.784261703491211,4.762232780456543,4.747881412506104,4.757143020629883,4.797953128814697,4.852407455444336,4.914259433746338,4.960544109344482,4.983034133911133,5.006079196929932,5.027617931365967,5.047439575195312,5.058347225189209,5.049508571624756,5.035178184509277,5.039586544036865,5.046986103057861,5.054087638854980,5.052189350128174,5.055358886718750,5.071825504302979,5.093952178955078,5.110785007476807,5.125187397003174,5.139640331268311,5.156218528747559,5.171985149383545,5.187937259674072,5.201303005218506,5.216678619384766,5.231701850891113,5.246028900146484,5.259452342987061,5.271413326263428,5.283185482025146,5.293581962585449,5.293412208557129,5.283962249755859,5.273189067840576,5.260622501373291,5.250647544860840,5.241805076599121,5.234564304351807,5.222686767578125,5.211853981018066,5.201045989990234,5.189259529113770,5.174319267272949,5.160471916198730,5.151184558868408,5.150746345520020,5.151503086090088,5.152854442596436,5.153058052062988,5.152826309204102,5.152260303497314,5.151272296905518,5.148958206176758,5.144312858581543,5.139403343200684,5.136547565460205,5.132636547088623,5.126588821411133,5.120756626129150,5.115336894989014,5.111860752105713,5.109864234924316,5.106749057769775,5.103148937225342,5.100293636322021,5.097828388214111,5.095407009124756,5.094638824462891,5.094941139221191,5.097133159637451,5.100564956665039,5.105216026306152,5.108319282531738,5.111969947814941,5.117643833160400,5.125150680541992,5.131722450256348,5.135263919830322,5.136389732360840,5.136982440948486,5.136862277984619,5.136836528778076,5.139200210571289,5.142301559448242,5.146812915802002,5.146733283996582,5.143676280975342,5.140727519989014,5.138195991516113,5.137362480163574,5.136950969696045,5.135814666748047,5.134786128997803,5.135399818420410,5.136360645294189,5.140963554382324,5.153757095336914,5.168745517730713,5.185648918151855,5.204764842987061,5.226162910461426],
                    [4.967250823974609,4.975839614868164,4.988574028015137,5.005420684814453,5.026359558105469,5.049267768859863,5.073655128479004,5.088273525238037,5.093230724334717,5.097934246063232,5.106286048889160,5.117267131805420,5.126485347747803,5.135589122772217,5.139670848846436,5.140980243682861,5.141490936279297,5.142237186431885,5.142951011657715,5.141512393951416,5.138693809509277,5.135926723480225,5.132469654083252,5.128373146057129,5.126749992370605,5.127780437469482,5.132312297821045,5.135107517242432,5.140632152557373,5.145726203918457,5.149401664733887,5.153276443481445,5.157012939453125,5.160775184631348,5.165282726287842,5.170673370361328,5.175803184509277,5.178859710693359,5.181085586547852,5.183277606964111,5.184807300567627,5.185530662536621,5.186439990997314,5.192412376403809,5.201178073883057,5.209831237792969,5.217564582824707,5.224858760833740,5.228829383850098,5.230106830596924,5.228445529937744,5.226670265197754,5.225436210632324,5.225289344787598,5.225309371948242,5.223748683929443,5.222887039184570,5.221627235412598,5.220087051391602,5.219184398651123,5.218540668487549,5.217818737030029,5.216560363769531,5.216374397277832,5.215879917144775,5.215646743774414,5.215500831604004,5.213841438293457,5.211719989776611,5.208801746368408,5.204876422882080,5.201478004455566,5.198093414306641,5.196035385131836,5.192183494567871,5.188688755035400,5.185358524322510,5.182358264923096,5.179678916931152,5.175023078918457,5.170299053192139,5.164783954620361,5.157685756683350,5.151165008544922,5.144761562347412,5.137933731079102,5.131852149963379,5.128170967102051,5.126400947570801,5.124210357666016,5.123268127441406,5.123016357421875,5.122654438018799,5.121860980987549,5.121349811553955,5.121078014373779,5.120461940765381,5.119200706481934,5.117784023284912,5.115952968597412,5.113912582397461,5.111698627471924,5.109211921691895,5.105803966522217,5.102483749389648,5.099180221557617,5.095982074737549,5.093014240264893,5.090205192565918,5.087579250335693,5.085334777832031,5.082771301269531,5.080181598663330,5.078045845031738,5.076187610626221,5.074647426605225,5.073492050170898,5.073952198028564,5.074389934539795,5.075264930725098,5.076209068298340,5.077292442321777,5.078581809997559,5.077623844146729,5.076049327850342,5.074930191040039,5.072295665740967,5.068400382995605,5.065392971038818,5.062444210052490,5.059542655944824,5.055361270904541,5.050138473510742,5.045609474182129,5.040694236755371,5.035823345184326,5.030904769897461,5.025970935821533,5.021399497985840,5.016643047332764,5.011730194091797,5.007132053375244,5.002992630004883,4.999971389770508,4.997459888458252,4.995536327362061,4.991657733917236,4.987415790557861,4.983309745788574,4.978733539581299,4.973758697509766,4.969449043273926,4.964833736419678,4.961253166198730,4.958401679992676,4.955196857452393,4.951777935028076,4.945863723754883,4.939624786376953,4.932638168334961,4.925523757934570,4.916970729827881,4.908766269683838,4.899828433990479,4.893650054931641,4.887586116790771,4.881935596466064,4.871254920959473,4.860715389251709,4.852821350097656,4.842085838317871,4.831295013427734,4.821529865264893,4.815467834472656,4.809595584869385,4.805121421813965,4.796981811523438,4.788822650909424,4.780601501464844,4.773147583007812,4.765107154846191,4.756510734558105,4.749393939971924,4.739176273345947,4.729631423950195,4.721326828002930,4.715672016143799,4.712575912475586,4.715694904327393,4.721944332122803,4.732484340667725,4.744414329528809,4.759511947631836,4.772056579589844,4.782522201538086,4.793728351593018,4.802356719970703,4.803503513336182,4.802701950073242,4.802042484283447,4.802939891815186,4.802793979644775,4.800483226776123,4.797747135162354,4.787921905517578,4.783557891845703,4.792234897613525,4.810376644134521,4.833294868469238,4.857587337493896,4.880250930786133,4.896678924560547,4.910502433776855,4.922914505004883,4.939778804779053,4.963840007781982,4.986626625061035,5.012035369873047,5.039781570434570,5.071947097778320,5.107858657836914,5.144235134124756,5.169886112213135,5.183828353881836,5.198163032531738,5.214128017425537,5.242326259613037,5.270633697509766,5.291644573211670,5.308124542236328,5.321657657623291,5.343873500823975,5.365623950958252,5.379139900207520,5.385998725891113,5.389361858367920,5.391330718994141,5.392048835754395,5.397031307220459,5.407573699951172,5.429773330688477,5.464153766632080,5.502849102020264,5.539356708526611,5.567569732666016,5.591678142547607,5.619302749633789,5.643895149230957,5.660936355590820,5.672740459442139,5.681729793548584,5.695512294769287,5.699346542358398,5.676652908325195,5.660778999328613,5.652897834777832,5.647253036499023,5.657286643981934,5.670133590698242,5.687960624694824,5.695579528808594,5.710960388183594,5.729814052581787,5.741963386535645,5.761099338531494,5.783183574676514,5.799745559692383,5.829602718353271,5.882001399993896,5.937329769134521,6.005683898925781,6.070572376251221,6.129720211029053,6.193808555603027,6.261742591857910,6.324728012084961,6.391581058502197,6.457763671875000,6.513551712036133,6.561433315277100,6.614273548126221,6.673457622528076,6.741276264190674,6.814258575439453,6.887757778167725,6.947128772735596,6.999788761138916,7.046741485595703,7.092483520507812,7.133162498474121,7.174765110015869,7.218038558959961,7.240036487579346,7.300031185150146,7.366593837738037,7.459840774536133,7.538106918334961,7.557877540588379,7.586197853088379,7.635463714599609,7.683093547821045,7.741381168365479,7.807598114013672,7.875003814697266,7.951243400573730,8.025416374206543,8.095326423645020,8.156127929687500,8.202201843261719,8.269275665283203,8.352782249450684,8.442217826843262,8.530278205871582,8.621592521667480,8.741000175476074,8.889998435974121,9.029843330383301,9.154765129089355,9.288268089294434,9.404001235961914,9.516563415527344,9.624922752380371,9.695422172546387,9.759167671203613,9.785219192504883,9.827726364135742,9.919754981994629,10.063990592956543,10.199877738952637,10.305718421936035,10.364016532897949,10.444787979125977,10.594749450683594,10.786584854125977,11.032354354858398,11.263174057006836,11.435145378112793,11.617639541625977,11.821256637573242,12.030835151672363,12.180034637451172,12.310956001281738,12.422966957092285,12.526993751525879,12.612919807434082,12.637093544006348,12.709236145019531,12.803256034851074,12.909494400024414,12.960175514221191,12.965800285339355,12.926865577697754,12.885206222534180,12.801857948303223,12.699404716491699,12.638473510742188,12.596208572387695,12.544191360473633,12.475368499755859,12.441953659057617,12.409146308898926,12.372008323669434,12.369309425354004,12.369669914245605,12.320661544799805,12.261816978454590,12.193796157836914,12.153768539428711,12.144495010375977,12.155532836914062,12.194373130798340,12.217905998229980,12.199621200561523,12.130863189697266,12.051774024963379,11.967187881469727,11.865825653076172,11.782656669616699,11.718454360961914,11.678381919860840,11.637665748596191,11.619432449340820,11.623924255371094,11.640707969665527,11.657012939453125,11.664640426635742,11.637484550476074,11.563156127929688,11.438295364379883,11.335732460021973,11.235480308532715,11.133006095886230,11.051515579223633,10.998445510864258,10.959739685058594,10.904208183288574,10.844265937805176,10.780322074890137,10.737465858459473,10.704674720764160,10.664954185485840,10.626180648803711,10.571082115173340,10.499642372131348,10.409967422485352,10.294527053833008,10.177969932556152,10.067762374877930,9.962399482727051,9.872960090637207,9.765267372131348,9.645450592041016,9.528663635253906,9.418033599853516,9.230538368225098,8.992281913757324,8.790047645568848,8.617024421691895,8.479837417602539,8.374382972717285,8.285324096679688,8.152411460876465,7.962856292724609,7.744034290313721,7.534538745880127,7.343095779418945,7.225693225860596,7.140231609344482,7.060421466827393,6.981357097625732,6.887928485870361,6.797703266143799,6.736209392547607,6.682074069976807,6.626247882843018,6.563285350799561,6.507894039154053,6.456830501556396,6.419803619384766,6.375713348388672,6.308655738830566,6.249334812164307,6.225196361541748,6.222601890563965,6.221872329711914,6.201769351959229,6.156675815582275,6.108387947082520,6.079218387603760,6.066800117492676,6.054319858551025,5.988941192626953,5.916278362274170,5.855669021606445,5.819603443145752,5.797814846038818,5.773691654205322,5.737600326538086,5.708529472351074,5.691607475280762,5.669276237487793,5.641047954559326,5.604503631591797,5.554409503936768,5.501516342163086,5.428918361663818,5.362350463867188,5.302621841430664,5.264510631561279,5.226120471954346,5.176902294158936,5.146851062774658,5.119312763214111,5.120434761047363,5.147938728332520,5.158279895782471,5.090811729431152,5.030261039733887,4.997862339019775,5.034145355224609,5.097373962402344,5.026574134826660,4.914320468902588,4.844807624816895,4.798109054565430,4.782680034637451,4.829996109008789,4.851108551025391,4.780149936676025,4.699617385864258,4.626884460449219,4.540028572082520,4.442646503448486,4.347493171691895,4.335340499877930,4.352534294128418,4.303999423980713,4.231421470642090,4.187922954559326,4.164196968078613,4.161715984344482,4.190659046173096,4.196704864501953,4.184081554412842,4.174217700958252,4.158133983612061,4.146560668945312,4.148229122161865,4.131157398223877,4.108975887298584,4.035457611083984,3.921121597290039,3.824353218078613,3.763711214065552,3.745786905288696,3.755051612854004,3.820370435714722,3.819959640502930,3.796881198883057,3.716379404067993,3.702134609222412,3.763025522232056,3.852619886398315,3.899652957916260,3.890413761138916,3.841056108474731,3.758039712905884,3.712119579315186,3.675970077514648,3.642591714859009,3.671782016754150,3.730222463607788,3.820172548294067,3.927342653274536,3.979892253875732,4.022863864898682,4.147732734680176,4.274947643280029,4.330847740173340,4.378749370574951,4.399205684661865,4.434498310089111,4.476202487945557,4.536744117736816,4.533425331115723,4.442706108093262,4.389002323150635,4.400430679321289,4.462772846221924,4.477552890777588,4.505796432495117,4.601646423339844,4.733809947967529,4.934429168701172,4.815742969512939,4.673584938049316,4.719190597534180,4.900602340698242,5.270493507385254,5.650305747985840,5.860616683959961,6.025705814361572,6.211218833923340,6.426295757293701,6.766153812408447,7.210365772247314,7.701918125152588,8.163361549377441,8.317446708679199,8.331032752990723,8.410386085510254,8.591182708740234,8.757582664489746,8.873217582702637,9.085048675537109,9.305638313293457,9.686599731445312,10.112338066101074,10.772291183471680,11.077277183532715,11.528722763061523,11.682065010070801,11.910692214965820,12.190708160400391,12.598879814147949,12.922795295715332,13.168378829956055,13.569618225097656,14.023753166198730,14.434729576110840,14.963546752929688,15.212292671203613,15.383792877197266,15.665549278259277,15.959129333496094,16.045928955078125,16.183153152465820,16.211273193359375,16.166589736938477,16.068443298339844,15.968262672424316,15.847568511962891,15.692958831787109,15.553006172180176,15.349737167358398,15.148150444030762,14.992700576782227,14.790844917297363,14.533531188964844,14.356827735900879,14.072775840759277,13.746688842773438,13.488968849182129,13.229818344116211,12.999344825744629,12.844485282897949,12.701662063598633,12.474884986877441,12.242556571960449,12.109392166137695,11.982228279113770,11.862581253051758,11.725476264953613,11.552036285400391,11.299898147583008,11.061742782592773,10.856314659118652,10.674612998962402,10.498144149780273,10.338490486145020,10.153298377990723,9.957339286804199,9.799833297729492,9.659771919250488,9.542078018188477,9.410679817199707,9.275730133056641,9.139700889587402,9.003455162048340,8.872183799743652,8.730531692504883,8.576863288879395,8.414276123046875,8.258967399597168,8.150975227355957,8.056682586669922,7.969748973846436,7.859433650970459,7.723304748535156,7.580330848693848,7.429591178894043,7.294116973876953,7.177041053771973,7.064651489257812,6.951172351837158,6.835390090942383,6.721502304077148,6.615817546844482,6.523767471313477,6.462653636932373,6.384339809417725,6.294068336486816,6.194204807281494,6.105031490325928,6.020966529846191,5.944420337677002,5.870284557342529,5.790615081787109,5.711858272552490,5.636820793151855,5.571314334869385,5.515630722045898,5.463914871215820,5.403617382049561,5.337999820709229,5.274630069732666,5.205309867858887,5.137258529663086,5.077537536621094,5.022357463836670,4.967229366302490,4.903712272644043,4.840069293975830,4.784541130065918,4.748188495635986,4.732269287109375,4.730269908905029,4.733112335205078,4.740354061126709,4.745314598083496,4.754373073577881,4.765054225921631,4.773756027221680,4.784882545471191,4.784261703491211,4.762232780456543,4.747881412506104,4.757143020629883,4.797953128814697,4.852407455444336,4.914259433746338,4.960544109344482,4.983034133911133,5.006079196929932,5.027617931365967,5.047439575195312,5.058347225189209,5.049508571624756,5.035178184509277,5.039586544036865,5.046986103057861,5.054087638854980,5.052189350128174,5.055358886718750,5.071825504302979,5.093952178955078,5.110785007476807,5.125187397003174,5.139640331268311,5.156218528747559,5.171985149383545,5.187937259674072,5.201303005218506,5.216678619384766,5.231701850891113,5.246028900146484,5.259452342987061,5.271413326263428,5.283185482025146,5.293581962585449,5.293412208557129,5.283962249755859,5.273189067840576,5.260622501373291,5.250647544860840,5.241805076599121,5.234564304351807,5.222686767578125,5.211853981018066,5.201045989990234,5.189259529113770,5.174319267272949,5.160471916198730,5.151184558868408,5.150746345520020,5.151503086090088,5.152854442596436,5.153058052062988,5.152826309204102,5.152260303497314,5.151272296905518,5.148958206176758,5.144312858581543,5.139403343200684,5.136547565460205,5.132636547088623,5.126588821411133,5.120756626129150,5.115336894989014,5.111860752105713,5.109864234924316,5.106749057769775,5.103148937225342,5.100293636322021,5.097828388214111,5.095407009124756,5.094638824462891,5.094941139221191,5.097133159637451,5.100564956665039,5.105216026306152,5.108319282531738,5.111969947814941,5.117643833160400,5.125150680541992,5.131722450256348,5.135263919830322,5.136389732360840,5.136982440948486,5.136862277984619,5.136836528778076,5.139200210571289,5.142301559448242,5.146812915802002,5.146733283996582,5.143676280975342,5.140727519989014,5.138195991516113,5.137362480163574,5.136950969696045,5.135814666748047,5.134786128997803,5.135399818420410,5.136360645294189,5.140963554382324,5.153757095336914,5.168745517730713,5.185648918151855,5.204764842987061,5.226162910461426],
                    [4.967250823974609,4.975839614868164,4.988574028015137,5.005420684814453,5.026359558105469,5.049267768859863,5.073655128479004,5.088273525238037,5.093230724334717,5.097934246063232,5.106286048889160,5.117267131805420,5.126485347747803,5.135589122772217,5.139670848846436,5.140980243682861,5.141490936279297,5.142237186431885,5.142951011657715,5.141512393951416,5.138693809509277,5.135926723480225,5.132469654083252,5.128373146057129,5.126749992370605,5.127780437469482,5.132312297821045,5.135107517242432,5.140632152557373,5.145726203918457,5.149401664733887,5.153276443481445,5.157012939453125,5.160775184631348,5.165282726287842,5.170673370361328,5.175803184509277,5.178859710693359,5.181085586547852,5.183277606964111,5.184807300567627,5.185530662536621,5.186439990997314,5.192412376403809,5.201178073883057,5.209831237792969,5.217564582824707,5.224858760833740,5.228829383850098,5.230106830596924,5.228445529937744,5.226670265197754,5.225436210632324,5.225289344787598,5.225309371948242,5.223748683929443,5.222887039184570,5.221627235412598,5.220087051391602,5.219184398651123,5.218540668487549,5.217818737030029,5.216560363769531,5.216374397277832,5.215879917144775,5.215646743774414,5.215500831604004,5.213841438293457,5.211719989776611,5.208801746368408,5.204876422882080,5.201478004455566,5.198093414306641,5.196035385131836,5.192183494567871,5.188688755035400,5.185358524322510,5.182358264923096,5.179678916931152,5.175023078918457,5.170299053192139,5.164783954620361,5.157685756683350,5.151165008544922,5.144761562347412,5.137933731079102,5.131852149963379,5.128170967102051,5.126400947570801,5.124210357666016,5.123268127441406,5.123016357421875,5.122654438018799,5.121860980987549,5.121349811553955,5.121078014373779,5.120461940765381,5.119200706481934,5.117784023284912,5.115952968597412,5.113912582397461,5.111698627471924,5.109211921691895,5.105803966522217,5.102483749389648,5.099180221557617,5.095982074737549,5.093014240264893,5.090205192565918,5.087579250335693,5.085334777832031,5.082771301269531,5.080181598663330,5.078045845031738,5.076187610626221,5.074647426605225,5.073492050170898,5.073952198028564,5.074389934539795,5.075264930725098,5.076209068298340,5.077292442321777,5.078581809997559,5.077623844146729,5.076049327850342,5.074930191040039,5.072295665740967,5.068400382995605,5.065392971038818,5.062444210052490,5.059542655944824,5.055361270904541,5.050138473510742,5.045609474182129,5.040694236755371,5.035823345184326,5.030904769897461,5.025970935821533,5.021399497985840,5.016643047332764,5.011730194091797,5.007132053375244,5.002992630004883,4.999971389770508,4.997459888458252,4.995536327362061,4.991657733917236,4.987415790557861,4.983309745788574,4.978733539581299,4.973758697509766,4.969449043273926,4.964833736419678,4.961253166198730,4.958401679992676,4.955196857452393,4.951777935028076,4.945863723754883,4.939624786376953,4.932638168334961,4.925523757934570,4.916970729827881,4.908766269683838,4.899828433990479,4.893650054931641,4.887586116790771,4.881935596466064,4.871254920959473,4.860715389251709,4.852821350097656,4.842085838317871,4.831295013427734,4.821529865264893,4.815467834472656,4.809595584869385,4.805121421813965,4.796981811523438,4.788822650909424,4.780601501464844,4.773147583007812,4.765107154846191,4.756510734558105,4.749393939971924,4.739176273345947,4.729631423950195,4.721326828002930,4.715672016143799,4.712575912475586,4.715694904327393,4.721944332122803,4.732484340667725,4.744414329528809,4.759511947631836,4.772056579589844,4.782522201538086,4.793728351593018,4.802356719970703,4.803503513336182,4.802701950073242,4.802042484283447,4.802939891815186,4.802793979644775,4.800483226776123,4.797747135162354,4.787921905517578,4.783557891845703,4.792234897613525,4.810376644134521,4.833294868469238,4.857587337493896,4.880250930786133,4.896678924560547,4.910502433776855,4.922914505004883,4.939778804779053,4.963840007781982,4.986626625061035,5.012035369873047,5.039781570434570,5.071947097778320,5.107858657836914,5.144235134124756,5.169886112213135,5.183828353881836,5.198163032531738,5.214128017425537,5.242326259613037,5.270633697509766,5.291644573211670,5.308124542236328,5.321657657623291,5.343873500823975,5.365623950958252,5.379139900207520,5.385998725891113,5.389361858367920,5.391330718994141,5.392048835754395,5.397031307220459,5.407573699951172,5.429773330688477,5.464153766632080,5.502849102020264,5.539356708526611,5.567569732666016,5.591678142547607,5.619302749633789,5.643895149230957,5.660936355590820,5.672740459442139,5.681729793548584,5.695512294769287,5.699346542358398,5.676652908325195,5.660778999328613,5.652897834777832,5.647253036499023,5.657286643981934,5.670133590698242,5.687960624694824,5.695579528808594,5.710960388183594,5.729814052581787,5.741963386535645,5.761099338531494,5.783183574676514,5.799745559692383,5.829602718353271,5.882001399993896,5.937329769134521,6.005683898925781,6.070572376251221,6.129720211029053,6.193808555603027,6.261742591857910,6.324728012084961,6.391581058502197,6.457763671875000,6.513551712036133,6.561433315277100,6.614273548126221,6.673457622528076,6.741276264190674,6.814258575439453,6.887757778167725,6.947128772735596,6.999788761138916,7.046741485595703,7.092483520507812,7.133162498474121,7.174765110015869,7.218038558959961,7.240036487579346,7.300031185150146,7.366593837738037,7.459840774536133,7.538106918334961,7.557877540588379,7.586197853088379,7.635463714599609,7.683093547821045,7.741381168365479,7.807598114013672,7.875003814697266,7.951243400573730,8.025416374206543,8.095326423645020,8.156127929687500,8.202201843261719,8.269275665283203,8.352782249450684,8.442217826843262,8.530278205871582,8.621592521667480,8.741000175476074,8.889998435974121,9.029843330383301,9.154765129089355,9.288268089294434,9.404001235961914,9.516563415527344,9.624922752380371,9.695422172546387,9.759167671203613,9.785219192504883,9.827726364135742,9.919754981994629,10.063990592956543,10.199877738952637,10.305718421936035,10.364016532897949,10.444787979125977,10.594749450683594,10.786584854125977,11.032354354858398,11.263174057006836,11.435145378112793,11.617639541625977,11.821256637573242,12.030835151672363,12.180034637451172,12.310956001281738,12.422966957092285,12.526993751525879,12.612919807434082,12.637093544006348,12.709236145019531,12.803256034851074,12.909494400024414,12.960175514221191,12.965800285339355,12.926865577697754,12.885206222534180,12.801857948303223,12.699404716491699,12.638473510742188,12.596208572387695,12.544191360473633,12.475368499755859,12.441953659057617,12.409146308898926,12.372008323669434,12.369309425354004,12.369669914245605,12.320661544799805,12.261816978454590,12.193796157836914,12.153768539428711,12.144495010375977,12.155532836914062,12.194373130798340,12.217905998229980,12.199621200561523,12.130863189697266,12.051774024963379,11.967187881469727,11.865825653076172,11.782656669616699,11.718454360961914,11.678381919860840,11.637665748596191,11.619432449340820,11.623924255371094,11.640707969665527,11.657012939453125,11.664640426635742,11.637484550476074,11.563156127929688,11.438295364379883,11.335732460021973,11.235480308532715,11.133006095886230,11.051515579223633,10.998445510864258,10.959739685058594,10.904208183288574,10.844265937805176,10.780322074890137,10.737465858459473,10.704674720764160,10.664954185485840,10.626180648803711,10.571082115173340,10.499642372131348,10.409967422485352,10.294527053833008,10.177969932556152,10.067762374877930,9.962399482727051,9.872960090637207,9.765267372131348,9.645450592041016,9.528663635253906,9.418033599853516,9.230538368225098,8.992281913757324,8.790047645568848,8.617024421691895,8.479837417602539,8.374382972717285,8.285324096679688,8.152411460876465,7.962856292724609,7.744034290313721,7.534538745880127,7.343095779418945,7.225693225860596,7.140231609344482,7.060421466827393,6.981357097625732,6.887928485870361,6.797703266143799,6.736209392547607,6.682074069976807,6.626247882843018,6.563285350799561,6.507894039154053,6.456830501556396,6.419803619384766,6.375713348388672,6.308655738830566,6.249334812164307,6.225196361541748,6.222601890563965,6.221872329711914,6.201769351959229,6.156675815582275,6.108387947082520,6.079218387603760,6.066800117492676,6.054319858551025,5.988941192626953,5.916278362274170,5.855669021606445,5.819603443145752,5.797814846038818,5.773691654205322,5.737600326538086,5.708529472351074,5.691607475280762,5.669276237487793,5.641047954559326,5.604503631591797,5.554409503936768,5.501516342163086,5.428918361663818,5.362350463867188,5.302621841430664,5.264510631561279,5.226120471954346,5.176902294158936,5.146851062774658,5.119312763214111,5.120434761047363,5.147938728332520,5.158279895782471,5.090811729431152,5.030261039733887,4.997862339019775,5.034145355224609,5.097373962402344,5.026574134826660,4.914320468902588,4.844807624816895,4.798109054565430,4.782680034637451,4.829996109008789,4.851108551025391,4.780149936676025,4.699617385864258,4.626884460449219,4.540028572082520,4.442646503448486,4.347493171691895,4.335340499877930,4.352534294128418,4.303999423980713,4.231421470642090,4.187922954559326,4.164196968078613,4.161715984344482,4.190659046173096,4.196704864501953,4.184081554412842,4.174217700958252,4.158133983612061,4.146560668945312,4.148229122161865,4.131157398223877,4.108975887298584,4.035457611083984,3.921121597290039,3.824353218078613,3.763711214065552,3.745786905288696,3.755051612854004,3.820370435714722,3.819959640502930,3.796881198883057,3.716379404067993,3.702134609222412,3.763025522232056,3.852619886398315,3.899652957916260,3.890413761138916,3.841056108474731,3.758039712905884,3.712119579315186,3.675970077514648,3.642591714859009,3.671782016754150,3.730222463607788,3.820172548294067,3.927342653274536,3.979892253875732,4.022863864898682,4.147732734680176,4.274947643280029,4.330847740173340,4.378749370574951,4.399205684661865,4.434498310089111,4.476202487945557,4.536744117736816,4.533425331115723,4.442706108093262,4.389002323150635,4.400430679321289,4.462772846221924,4.477552890777588,4.505796432495117,4.601646423339844,4.733809947967529,4.934429168701172,4.815742969512939,4.673584938049316,4.719190597534180,4.900602340698242,5.270493507385254,5.650305747985840,5.860616683959961,6.025705814361572,6.211218833923340,6.426295757293701,6.766153812408447,7.210365772247314,7.701918125152588,8.163361549377441,8.317446708679199,8.331032752990723,8.410386085510254,8.591182708740234,8.757582664489746,8.873217582702637,9.085048675537109,9.305638313293457,9.686599731445312,10.112338066101074,10.772291183471680,11.077277183532715,11.528722763061523,11.682065010070801,11.910692214965820,12.190708160400391,12.598879814147949,12.922795295715332,13.168378829956055,13.569618225097656,14.023753166198730,14.434729576110840,14.963546752929688,15.212292671203613,15.383792877197266,15.665549278259277,15.959129333496094,16.045928955078125,16.183153152465820,16.211273193359375,16.166589736938477,16.068443298339844,15.968262672424316,15.847568511962891,15.692958831787109,15.553006172180176,15.349737167358398,15.148150444030762,14.992700576782227,14.790844917297363,14.533531188964844,14.356827735900879,14.072775840759277,13.746688842773438,13.488968849182129,13.229818344116211,12.999344825744629,12.844485282897949,12.701662063598633,12.474884986877441,12.242556571960449,12.109392166137695,11.982228279113770,11.862581253051758,11.725476264953613,11.552036285400391,11.299898147583008,11.061742782592773,10.856314659118652,10.674612998962402,10.498144149780273,10.338490486145020,10.153298377990723,9.957339286804199,9.799833297729492,9.659771919250488,9.542078018188477,9.410679817199707,9.275730133056641,9.139700889587402,9.003455162048340,8.872183799743652,8.730531692504883,8.576863288879395,8.414276123046875,8.258967399597168,8.150975227355957,8.056682586669922,7.969748973846436,7.859433650970459,7.723304748535156,7.580330848693848,7.429591178894043,7.294116973876953,7.177041053771973,7.064651489257812,6.951172351837158,6.835390090942383,6.721502304077148,6.615817546844482,6.523767471313477,6.462653636932373,6.384339809417725,6.294068336486816,6.194204807281494,6.105031490325928,6.020966529846191,5.944420337677002,5.870284557342529,5.790615081787109,5.711858272552490,5.636820793151855,5.571314334869385,5.515630722045898,5.463914871215820,5.403617382049561,5.337999820709229,5.274630069732666,5.205309867858887,5.137258529663086,5.077537536621094,5.022357463836670,4.967229366302490,4.903712272644043,4.840069293975830,4.784541130065918,4.748188495635986,4.732269287109375,4.730269908905029,4.733112335205078,4.740354061126709,4.745314598083496,4.754373073577881,4.765054225921631,4.773756027221680,4.784882545471191,4.784261703491211,4.762232780456543,4.747881412506104,4.757143020629883,4.797953128814697,4.852407455444336,4.914259433746338,4.960544109344482,4.983034133911133,5.006079196929932,5.027617931365967,5.047439575195312,5.058347225189209,5.049508571624756,5.035178184509277,5.039586544036865,5.046986103057861,5.054087638854980,5.052189350128174,5.055358886718750,5.071825504302979,5.093952178955078,5.110785007476807,5.125187397003174,5.139640331268311,5.156218528747559,5.171985149383545,5.187937259674072,5.201303005218506,5.216678619384766,5.231701850891113,5.246028900146484,5.259452342987061,5.271413326263428,5.283185482025146,5.293581962585449,5.293412208557129,5.283962249755859,5.273189067840576,5.260622501373291,5.250647544860840,5.241805076599121,5.234564304351807,5.222686767578125,5.211853981018066,5.201045989990234,5.189259529113770,5.174319267272949,5.160471916198730,5.151184558868408,5.150746345520020,5.151503086090088,5.152854442596436,5.153058052062988,5.152826309204102,5.152260303497314,5.151272296905518,5.148958206176758,5.144312858581543,5.139403343200684,5.136547565460205,5.132636547088623,5.126588821411133,5.120756626129150,5.115336894989014,5.111860752105713,5.109864234924316,5.106749057769775,5.103148937225342,5.100293636322021,5.097828388214111,5.095407009124756,5.094638824462891,5.094941139221191,5.097133159637451,5.100564956665039,5.105216026306152,5.108319282531738,5.111969947814941,5.117643833160400,5.125150680541992,5.131722450256348,5.135263919830322,5.136389732360840,5.136982440948486,5.136862277984619,5.136836528778076,5.139200210571289,5.142301559448242,5.146812915802002,5.146733283996582,5.143676280975342,5.140727519989014,5.138195991516113,5.137362480163574,5.136950969696045,5.135814666748047,5.134786128997803,5.135399818420410,5.136360645294189,5.140963554382324,5.153757095336914,5.168745517730713,5.185648918151855,5.204764842987061,5.226162910461426]])
upper_t = ex234_class2_mean[0] + ex234_class2_std[0]
lower_t = ex234_class2_mean[0] - ex234_class2_std[0]

scores_dict = {
'h1': [0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'h2': [0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'p3': [1,7,1,2,1,7,7,7,7,7,7,7,7,7,1,1,2],
'h4': [0,7,2,2,1,7,7,7,7,7,7,7,7,7,2,2,2], #MP mis detection
'p5': [0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'p6': [0,7,0,0,0,7,7,7,7,7,7,7,7,7,2,0,0],
'p7': [0,7,2,2,1,7,7,7,7,7,7,7,7,7,2,1,2],
'p8': [0,7,1,1,1,7,7,7,7,7,7,7,7,7,2,2,1],
'p9': [1,7,1,1,0,7,7,7,7,7,7,7,7,7,2,2,2],
'p10':[1,7,1,1,1,7,7,7,7,7,7,7,7,7,2,1,1],
'h11':[0,7,2,2,1,7,7,7,7,7,7,7,7,7,2,2,2],
'h12':[0,7,1,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'p13':[1,7,1,1,1,7,7,7,7,7,7,7,7,7,2,1,2],
'p14':[1,7,1,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'h15':[0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'p16':[1,7,2,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'p17':[0,7,1,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'p18':[1,7,1,0,0,7,7,7,7,7,7,7,7,7,2,1,0],
'p19':[1,7,1,0,1,7,7,7,7,7,7,7,7,7,2,1,1],
'p20':[0,7,1,1,0,7,7,7,7,7,7,7,7,7,2,2,2],
'p21':[1,7,2,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'p22':[1,7,1,0,0,7,7,7,7,7,7,7,7,7,2,2,1],
'p23':[0,7,2,2,0,7,7,7,7,7,7,7,7,7,2,0,2],
'p24':[0,7,2,2,2,7,7,7,7,7,7,7,7,7,7,7,7],
'p25':[1,7,1,2,1,7,7,7,7,7,7,7,7,7,7,7,7],
'p26':[1,7,2,1,0,7,7,7,7,7,7,7,7,7,7,7,7],
'h27':[0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'p28':[0,7,2,1,2,7,7,7,7,7,7,7,7,7,7,7,7],
'p29':[1,7,1,1,1,7,7,7,7,7,7,7,7,7,2,2,2],
'p30':[1,7,0,0,1,7,7,7,7,7,7,7,7,7,2,1,1],
'p31':[0,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,2],
'p32':[0,7,1,1,0,7,7,7,7,7,7,7,7,7,2,0,0],
'p33':[0,7,2,2,2,7,7,7,7,7,7,7,7,7,7,7,7],
'p34':[0,7,0,0,0,7,7,7,7,7,7,7,7,7,2,0,0],
'p35':[1,7,2,2,1,7,7,7,7,7,7,7,7,7,7,7,7],
'p36':[1,7,2,2,2,7,7,7,7,7,7,7,7,7,2,2,0],
'p37':[0,7,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7],
'p38':[0,7,1,1,0,7,7,7,7,7,7,7,7,7,7,7,7],
}  #ex 0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6


def my_inter(list1, resample_len):
    if (list1.size == resample_len):
        return list1.tolist()
    tmp =  list1.reshape(list1.size)
    resample_list1 = TimeSeriesResampler(sz=resample_len).fit_transform(tmp)
    tmp = resample_list1.reshape(resample_len)
    return tmp

def split_signal2iterations(data, ex_num):
    if (PLOT_ENABLED):
       plt.plot(data[:], label="full signal")
       plt.legend()
       plt.show()

    b, a = butter(1, 0.03)
    np.set_printoptions(threshold=np.inf, linewidth=np.inf)
    smooth = filtfilt(b, a, data)
    splits = []
    if (ex_num > 1 and ex_num < 5):
        min_indices, _ = find_peaks(-smooth, distance=70, height=27)
        max_indices, _ = find_peaks(smooth, distance=70, height=-25)
        if (min_indices.size == 0 or max_indices.size == 0):
            print("failed to perform")
            return 0
        while (len(max_indices) > 1):
            if (max_indices[1] < min_indices[0]):
                max_indices = max_indices[1:]
                continue
            break
        while (len(min_indices) > 1):
            if (min_indices[1] < min_indices[0]):
                min_indices = min_indices[1:]
                continue
            break
        ##if the last detected peak is a max, then we set the last series point as min peak
        if (max_indices[-1] > min_indices[-1]):
            min_indices = np.append(min_indices, len(data)-1)
        min_idx = 0
        max_idx = 0
        split_list = []
        tmp_list = []
        
        ##advance the min index point to a min which has at least one max peak before it
        ##e.g. min0,max0,min1 >> min1
        while (min_indices[min_idx] <= max_indices[0]):
            min_idx = min_idx + 1
        
        ##if the min peak before the current one is before the first max peak, then we remove all the series
        ##from the beginning until that point (min peak before the current one)
        if (min_indices[min_idx-1] <= max_indices[0]):
            data = data[min_indices[min_idx-1]:]
            #data = my_inter(data, SIGNAL_LENGTH)
            return split_signal2iterations(data, ex_num)
        ##the last min index is not the last point in the series, we remove all the points after it (it's a redundant tail)
        if (min_indices[-1] != len(data)-1):
            print("removing redundant tail")
            data = data[:min_indices[-1]]
            #data = my_inter(data, SIGNAL_LENGTH)
            return split_signal2iterations(data, ex_num)

        while (min_idx < len(min_indices) and max_idx < len(max_indices)):
            tmp_list.append(min_indices[min_idx])
            try:
                while (min_indices[min_idx+1] <= max_indices[max_idx+1]):
                    min_idx = min_idx + 1
                    tmp_list.append(min_indices[min_idx])
                    continue
            except:
                print("out of bounds")
            split_list.append(int(np.mean(tmp_list)))
            min_idx = min_idx + 1
            max_idx = max_idx + 1
            tmp_list.clear()
    if (ex_num > 13 and ex_num < 17):
        if (PLOT_ENABLED):
            plt.plot(data)
            plt.plot(smooth)
            plt.show()
        #find max an min peaks
        min_indices, _ = find_peaks(-smooth, distance=70, height=-18)
        max_indices, _ = find_peaks(smooth, distance=70, height=25)

        if (min_indices.size == 0 or max_indices.size == 0):
            print("failed to perform")
            return 0
            
        while (len(min_indices) > 1):
            if (min_indices[1] < min_indices[0]):
                min_indices = min_indices[1:]
                continue
            break
        while (len(max_indices) > 1):
            if (max_indices[1] < min_indices[0]):
                max_indices = max_indices[1:]
                continue
            break
            
        ##if the last detected peak is a min, then we set the last series point as max peak
        if (min_indices[-1] > max_indices[-1]):
            max_indices = np.append(max_indices, len(data)-1)
        min_idx = 0
        max_idx = 0
        split_list = []
        tmp_list = []
        
        ##advance the max index point to a max which has at least one min peak before it
        ##e.g. max0,min0,max1 >> max1
        while (max_indices[max_idx] <= min_indices[0]):
            max_idx = max_idx + 1
        
        ##if the min peak before the current one is before the first max peak, then we remove all the series
        ##from the beginning until that point (min peak before the current one)
        if (max_indices[max_idx-1] <= min_indices[0]):
            data = data[max_indices[max_idx-1]:]
            #data = my_inter(data, SIGNAL_LENGTH)
            return split_signal2iterations(data, ex_num)
        ##the last min index is not the last point in the series, we remove all the points after it (it's a redundant tail)
        if (max_indices[-1] != len(data)-1):
            print("removing redundant tail")
            data = data[:max_indices[-1]]
            #data = my_inter(data, SIGNAL_LENGTH)
            return split_signal2iterations(data, ex_num)

        while (max_idx < len(max_indices) and min_idx < len(min_indices)):
            tmp_list.append(max_indices[max_idx])
            try:
                while (max_indices[max_idx+1] <= min_indices[min_idx+1]):
                    max_idx = max_idx + 1
                    tmp_list.append(max_indices[max_idx])
                    continue
            except:
                print("out of bounds")
            split_list.append(int(np.mean(tmp_list)))
            min_idx = min_idx + 1
            max_idx = max_idx + 1
            tmp_list.clear()
        
        
        
        ##first split is the first minimum which its index is greater than the first max peak
        splits.append(max_indices[np.argmin(max_indices<min_indices[0])])
        
        second_split = splits[0]
        idx = 1
        while (second_split == splits[0]):
            second_split = max_indices[np.argmin(max_indices<min_indices[idx])]
            idx = idx + 1
    largest_values = smooth[max_indices]
    smallest_values = smooth[min_indices]
    if (PLOT_ENABLED):
        plt.scatter(max_indices, largest_values, s = 50, color='red', marker = 'D')
        plt.scatter(min_indices, smallest_values, s = 50, color='blue', marker = 'D')
        plt.plot(smooth)
        plt.show()

    iterations = [data[:split_list[0]]]
    iterations[0] = np.array([float(x) for x in iterations[0]])
    if (PLOT_ENABLED):
        plt.plot(data[:], label="full signal")
        plt.plot(np.arange(1, len(iterations[0])+1), iterations[0], label="iteration 1")
    length = 0
    for idx in range(1, len(split_list)):
        iterations.append(data[split_list[idx-1]:split_list[idx]])
        iterations[idx] = np.array([float(x) for x in iterations[idx]])
        length = length + len(iterations[idx-1])
        iter = np.linspace(length, length + len(iterations[idx])+1, len(iterations[idx]))
        if (PLOT_ENABLED):
            plt.plot(iter, iterations[idx], label=f"iteration {idx+1}")
        
    ###np.linspace is used to shift the signal starting point at the x axes in the plot
    #second = np.linspace(len(iterations[0]), len(iterations[0])+len(iterations[1])+1, len(iterations[1]))
    #plt.plot(second, iterations[1], label="iteration 2")
    #
    ###np.linspace is used to shift the signal starting point at the x axes in the plot
    #third = np.linspace(len(iterations[0])+len(iterations[1]), len(iterations[0])+len(iterations[1])+len(iterations[2])+1, len(iterations[2]))
    #plt.plot(third, iterations[2], label="iteration 3")
    if (PLOT_ENABLED):
        plt.legend()
        plt.show()

    return iterations, split_list

#https://stackoverflow.com/questions/9542738/python-find-in-list
#https://stackoverflow.com/questions/2566412/find-nearest-value-in-numpy-array
#--dataset ex234WInter --dpath "..\..\..\..\UCR_TS_Archive_2015\UCR_TS_Archive_2015"  --n_recurrences 1
def find_nearest(array, value, input_shape):
    array = np.asarray(array)
    array = array.reshape(array.size)
    idx = (np.abs(array - value)).argmin()
    return idx, array[idx]%input_shape
    
class Exercise:
    def __init__(self, num, feature):
        ##list of all exercises and features, with frame numbers of each exercise for each feature
        ##exercises_points[feature][exercise][iteration], e.g. exercises_points[1][2][0] is the frame number for the first 
        ##iteration of exercise 3 for feature 2.
        ##feature mapping can be converted from numbers to strings using a dict (a nice to have TODO)
        ##
        exercises_points = [[[320,385],[415,444],[574,606]],
                            [[15,16,17], [18,19,20], [21,22,23], [24,25,26], [27,28,29]],
                            [[30,31,32], [33,34,35], [36,37,38], [39,40,41], [42,43,44]]
                            ]

        self.num = num
        self.feature = feature
        self.points = exercises_points[self.feature][self.num]
    def get(self):
        print(f"{self.num}, {self.feature}")

    def map(self, frame):
        print(f"{self.num}, {frame}")



def track_joint1D(joint_positions):
    position_deltas = [joint_positions[i+1][0] - joint_positions[i][0] for i in range(len(joint_positions)-1)]
    stability_measure = statistics.stdev(position_deltas)
    return stability_measure * 100

def track_joint2D(joint_positions):
    position_deltas = [math.sqrt((joint_positions[i+1][0] - joint_positions[i][0])**2 + 
                                 (joint_positions[i+1][1] - joint_positions[i][1])**2) for i in range(len(joint_positions)-1)]
    stability_measure = statistics.stdev(position_deltas)
    return stability_measure * 100

def track_joint3D(joint_positions):
    position_deltas = [math.sqrt((joint_positions[i+1][0] - joint_positions[i][0])**2 + 
                                 (joint_positions[i+1][1] - joint_positions[i][1])**2 + 
                                 (joint_positions[i+1][2] - joint_positions[i][2])**2) for i in range(len(joint_positions)-1)]
    stability_measure = statistics.stdev(position_deltas)
    return stability_measure * 100

def inference_signal(interpolated_X_test, loaded_model, input_shape, ):
    X = torch.Tensor(interpolated_X_test).to("cpu")

    transformed_input_tensor, thetas = loaded_model(X, return_theta=True)
    transformed_input_numpy = transformed_input_tensor.data.cpu().numpy()
    transformed_input_numpy = transformed_input_numpy.reshape(int(transformed_input_numpy.size/input_shape), input_shape)
    mse = []
    msem = []
    std_mean = []
    t = range(transformed_input_numpy[0].size)
    for iter_num in range(transformed_input_numpy.shape[0]):
        mse.append((ex234_class2_mean[0] - transformed_input_numpy[iter_num]) ** 2)
        msem.append(np.mean((ex234_class2_mean[0] - transformed_input_numpy[iter_num]) ** 2))
        
        std_mean.append(np.mean(np.abs(mse[-1] / ex234_class2_std[0] ** 2)))
        print(f"MeanSquaredError={msem[iter_num]}, std_mean={std_mean[iter_num]}")
        ##Plot inference result compared to mean signal
        ##
        if (PLOT_ENABLED):
            plt.plot(t, transformed_input_numpy[iter_num], label="Aligned", color ="green")
            plt.plot(t, ex234_class2_mean[0], label="mean", color ="blue")
            plt.fill_between(t, upper_t, lower_t, color='#539caf', alpha=0.6, label=r"$\pm\sigma$")
            plt.legend()
            plt.show()

    return transformed_input_numpy, thetas, std_mean

def read_MPoutput_file1(file_name, ex_num, has_header=1):
    with open(f"{file_name}_landmarks.json", "r") as file:
        lines = file.readlines()
        list_from_file = list(map(float, lines[1].strip().split(",")))
    return list_from_file

def read_MPoutput_file(file_name, ex_num, has_header=1):
    #f_name = r"D:\M.Sc_study\github\thesis\ilan_computerVisionML_AI\mediapipe_eval\data\p7\h15_f2_out.txt"
    values=[]         #an empty list to store the second column
    with open(file_name+'.txt', 'r') as rf:
        reader = csv.reader(rf, delimiter=',')
        if (has_header):
            next(reader) #uncomment if input file has a header line
        for row in reader:
            #if (ex_num > 1 and ex_num < 5):
            values.append([float(x) for x in row])
            #if (ex_num > 13 and ex_num < 17):
            #values.append(float(row[1])) #change to row[1] if input file has two columns
    #P#print(values)
    return values
model_init = 0
loaded_model = 0
loaded_model_recurrence = 0
def inference(args, dataset_name="ECGFiveDays"):

    # Print args
    #print(args)

    # Data
    datadir = args.dpath #"data/UCR/UCR_TS_Archive_2015"
    device = 'cpu'
    exp_name = f"{dataset_name}_exp"
    
    # Init an instance of the experiment class. Holds results
    # and trainning param such as lr, n_epochs etc
    expManager = ExperimentsManager()
    expManager.add_experiment(exp_name, n_epochs=args.n_epochs, batch_size=args.batch_size, lr=args.lr, device=device)
    Experiment = expManager[exp_name]

    # DTAN args
    DTANargs1 = DTAN_args(tess_size=args.tess_size,
                          smoothness_prior=args.smoothness_prior,
                          lambda_smooth=args.lambda_smooth,
                          lambda_var=args.lambda_var,
                          n_recurrences=args.n_recurrences,
                          zero_boundary=True,
                          )
    DTANargs2 = DTAN_args(tess_size=args.tess_size,
                          smoothness_prior=args.smoothness_prior,
                          lambda_smooth=args.lambda_smooth,
                          lambda_var=args.lambda_var,
                          n_recurrences=args.n_recurrences+1,
                          zero_boundary=True,
                          )
    expManager[exp_name].add_DTAN_arg(DTANargs1)
    CHANNELS = 1
    DTANargs = Experiment.get_DTAN_args()

    #channels, input_shape = train_loader.dataset[0][0].shape
    channels = CHANNELS
    input_shape = SIGNAL_LENGTH
    global model_init
    global loaded_model
    global loaded_model_recurrence
    if (model_init == 0):
        model_init = 1
        loaded_model = DTAN(input_shape, channels, tess=[DTANargs.tess_size,], n_recurrence=DTANargs.n_recurrences,
                        zero_boundary=DTANargs.zero_boundary, device=device).to(device)
        loaded_model.load_state_dict(torch.load('../../checkpoints/1673108357_ex234_split_iter_modelstate_dict.pth'))
        loaded_model.eval()
    
        loaded_model_recurrence = DTAN(input_shape, channels, tess=[DTANargs.tess_size,], n_recurrence=DTANargs.n_recurrences + 1,
                        zero_boundary=DTANargs.zero_boundary, device=device).to(device)
        loaded_model_recurrence.load_state_dict(torch.load('../../checkpoints/1673108357_ex234_split_iter_modelstate_dict.pth'))
        loaded_model_recurrence.eval()


    dataset = dataset_name
    ex_num = int(dataset.split("_")[1][1:])
    patient_name = (dataset.split("_")[0])
    f_name = os.path.join(datadir, dataset)
    label_score = str(scores_dict[patient_name][ex_num])

    ##features_row indicates which feature we want, =1 means we need knee angle, =2 means we need leg height
    features_row = 2
    try:
        features = read_MPoutput_file1(f_name, ex_num, has_header=1)
    except:
        print(f"error reading file {f_name}")
        return
    X_test = np.array([features, features])

    #P#print(X_test)
    #X_test = np.loadtxt(file_name+'.txt',delimiter=',') #for csv input in one row [e.g. 4,1,5,2,1,1]

    # add a third channel for univariate data
    if len(X_test.shape) < 3:
        X_test = np.expand_dims(X_test, -1)
    # Switch channel dim ()
    # Torch data format is  [N, C, W] W=timesteps
    X_test = np.swapaxes(X_test, 2, 1)

    interpolated_X_test = []
    
    iterations, split_list = split_signal2iterations(X_test[0].reshape(X_test[0].size), ex_num)
    split_list = np.insert(split_list, 0, 0.)
    #iterations = split_signal2iterations(my_inter(X_test[0], input_shape), ex_num)
    if (iterations == 0):
        feature_vec = [-9999, 9999, 9999, -9999, -9999, 9999, 9999, 9999, 9999, 9999]
        if (FWRITE_ENABLED):
            output_file_h = open(output_feature_vec, 'a', encoding="utf8")
            output_file_h.write("[\"{}_f{}\",{},{}],\n".format(patient_name, ex_num, label_score, str(feature_vec)))
            output_file_h.close()
        return 9999
    b, a = butter(2, 0.8)
    for iter in iterations:
        interpolated_sig = my_inter(iter, SIGNAL_LENGTH)
        smoothed_iteration = filtfilt(b, a, interpolated_sig)
        interpolated_X_test.append(smoothed_iteration)
    interpolated_X_test = np.array(interpolated_X_test)
    ## add a third channel for univariate data
    if len(interpolated_X_test.shape) < 3:
        interpolated_X_test = np.expand_dims(interpolated_X_test, -1)
    interpolated_X_test = np.swapaxes(interpolated_X_test, 2, 1)

    ##start inference of input signal and verify std_mean values
    ##if an iteration has std_mean > 2 then we try to inference it once again
    transformed_input_numpy, thetas, std_mean = inference_signal(interpolated_X_test, loaded_model, input_shape)
    for iter_num in range(len(std_mean)):
        if (std_mean[iter_num] > 2):
            transformed_input_numpy_recurrence, thetas_recurrence, std_mean_recurrence = inference_signal(interpolated_X_test, 
                                                                         loaded_model_recurrence, input_shape)
            for iter_num in range(len(std_mean_recurrence)):
                if std_mean[iter_num] > std_mean_recurrence[iter_num]:
                    transformed_input_numpy[iter_num] = transformed_input_numpy_recurrence[iter_num]
                    #thetas[iter_num] = thetas_recurrence[iter_num]
                    std_mean[iter_num] = std_mean_recurrence[iter_num]
            break
    min_std_mean = min(std_mean)
    min_iter = std_mean.index(min_std_mean) + 1
    print(f"patient score is {min_std_mean} in iteration {min_iter}")
    orig = interpolated_X_test.reshape(interpolated_X_test.size)
    aligned = transformed_input_numpy.reshape(transformed_input_numpy.size)
    nb = np.arange(input_shape)

    identity = np.arange(input_shape * len(std_mean))
    identity = identity.reshape(len(std_mean), input_shape)
    ## add a third channel for univariate data
    if len(identity.shape) < 3:
        identity = np.expand_dims(identity, -1)
    identity = np.swapaxes(identity, 2, 1)
    identityTF = torch.Tensor(identity).to("cpu")
    identityTF_tensor = loaded_model.T.transform_data(identityTF, thetas[0], outsize=(loaded_model.input_shape,))
    identityTF_numpy = identityTF_tensor.data.cpu().numpy()
    try:
        if (thetas_recurrence):
            identityTF_tensor_recurrence = loaded_model_recurrence.T.transform_data(identityTF, thetas_recurrence[-1], outsize=(loaded_model_recurrence.input_shape,))
            identityTF_numpy_recurrence = identityTF_tensor_recurrence.data.cpu().numpy()
            ##in case an iteration got better score with recurrence DTAN, update its aligned signal in final array
            for iter_num in range(len(std_mean_recurrence)):
                if std_mean[iter_num] > std_mean_recurrence[iter_num]:
                    identityTF_numpy[iter_num] = identityTF_numpy_recurrence[iter_num]
    except NameError:
        print("no need for thetas_recurrence")
    exercises_points = [[272,420],
                        [420,560],
                        [30,31,32]
                        ]

    ####

    identityTF_numpy = identityTF_numpy.reshape(len(std_mean), input_shape)
    interpolated_X_test = interpolated_X_test.reshape(len(std_mean), input_shape)
    transformed_input_numpy = transformed_input_numpy.reshape(len(std_mean), input_shape)
    raise_leg_start_end_idx = []
    on_bed_start_end_idx = []
    speeds = []
    ####
    for iter in range(len(std_mean)):
        raise_begin = exercises_points[0][0]
        raise_end = exercises_points[0][1] 
        on_bed_end = exercises_points[1][1] 
        
        found_idx_raise_begin = find_nearest(identity[iter], identityTF_numpy[iter][raise_begin],input_shape)
        found_idx_raise_end = find_nearest(identity[iter], identityTF_numpy[iter][raise_end],input_shape)
        found_idx_on_bed_end = find_nearest(identity[iter], identityTF_numpy[iter][on_bed_end],input_shape)

        #print(found_idx, interpolated_X_test[iter][found_idx[1]])
        if (PLOT_ENABLED):
            plt.plot(ex234_class2_mean[0], label="Mean", color ="black")
        markers = ['v', '^']
        x_frames = [raise_begin , raise_end, on_bed_end]
        y_frames = [ex234_class2_mean[0][raise_begin], ex234_class2_mean[0][raise_end], ex234_class2_mean[0][on_bed_end]]
        if (PLOT_ENABLED):
            plt.scatter(x_frames, y_frames, c='red', marker='o')
            plt.plot(nb, transformed_input_numpy[iter], label="Aligned", color ="green")
            plt.scatter(raise_begin, transformed_input_numpy[iter][raise_begin], c='red', marker='h')
            plt.scatter(raise_end, transformed_input_numpy[iter][raise_end], c='red', marker='h')
            plt.scatter(on_bed_end, transformed_input_numpy[iter][on_bed_end], c='blue', marker='h')
            plt.plot(interpolated_X_test[iter], label="Orig", color ="blue")
            plt.scatter(found_idx_raise_begin[0], interpolated_X_test[iter][found_idx_raise_begin[0]], c='red', marker='^')
            plt.scatter(found_idx_raise_end[0], interpolated_X_test[iter][found_idx_raise_end[0]], c='red', marker='^')
            plt.scatter(found_idx_on_bed_end[0], interpolated_X_test[iter][found_idx_on_bed_end[0]], c='blue', marker='^')
            plt.legend()
            plt.show()

        ##these lists will be used to calculate speed and knee angle, in the interval of found indexes
        raise_leg_start_end_idx.append([found_idx_raise_begin[0], found_idx_raise_end[0]])
        on_bed_start_end_idx.append([found_idx_raise_end[0], found_idx_on_bed_end[0]])

        distance = interpolated_X_test[iter][raise_leg_start_end_idx[iter][1]] - interpolated_X_test[iter][raise_leg_start_end_idx[iter][0]] # distance in meters
        time = raise_leg_start_end_idx[iter][1] - raise_leg_start_end_idx[iter][0] # time in frames
        speeds.append(distance / time)

    #np.savetxt(f'identity_{dataset}.txt', identity[0][0], delimiter=',',fmt='%1.15f')
    #np.savetxt(f'identity_aligned_{dataset}.txt', identityTF_numpy[0], delimiter=',',fmt='%1.15f')
    #print(interpolated_X_test[min_iter])
    
    ##start generating feature vector, consists of:
    ##speed of best iteration, std_mean of best iteration, min_high and max_high for best iter, mean of speed for all iterations, mean of std_mean of all iterations
    #calculate movement speed in best iteration
    min_iter = min_iter-1

    distance = interpolated_X_test[min_iter][raise_leg_start_end_idx[min_iter][1]] - interpolated_X_test[min_iter][raise_leg_start_end_idx[min_iter][0]] # distance in meters
    time = raise_leg_start_end_idx[min_iter][1] - raise_leg_start_end_idx[min_iter][0] # time in frames

    speed = distance / time #+ std_mean[min_iter]
    
    ##knee angle: look at the frames [raise_end:on_bed_end], those are the frames where patient leg is on bed, calculate the angle in this interval
    ##take the average of the angle or maybe average and min,max or something
    angle = interpolated_X_test[min_iter][raise_leg_start_end_idx[min_iter][1]] - interpolated_X_test[min_iter][raise_leg_start_end_idx[min_iter][0]] # distance in meters
    joint_positions = gen_feature(f"{datadir}/{patient_name}_f{ex_num}_landmarks.json", joint0=12, joint1=24)
    stability_measure = np.mean(joint_positions)
##problem TODO: the iteration indexes and signals we're working with are interpolated, thus the original landmarks'
##json frame indexes will not match what we have here
##solution: calculate angle over the whole video, interpolate it and then take the relevant indexes
##this may require reverse engineering the whole changes that the original signal passed, and 
##do it again on the angles signal that we can generate here
    ##left side is odd, right side is even which is joint+1 e.g. left_hip=23, right_hip=24=left_hip+1
    side = scores_dict[patient_name][0]
    knee_angle = np.array(gen_feature(f"{datadir}/{patient_name}_f{ex_num}_landmarks.json", joint0=23+side, 
                                                                                        joint1=25+side,
                                                                                        joint2=27+side))
    best_iteration_angles = knee_angle[split_list[min_iter]:split_list[min_iter+1]]
    best_iteration_angles = my_inter(best_iteration_angles, SIGNAL_LENGTH)

    #now, calculate the mean knee angle in the interval between reaching the bed and starting to go down
    knee_angle_mean = np.mean(best_iteration_angles[on_bed_start_end_idx[min_iter][0]:on_bed_start_end_idx[min_iter][1]])
    ##consider adding a feature of the time/histogram of angles > 150 (REGEL YESHARA) or number of frames the 
    ##leg was straight
    
    feature_vec = [speed, std_mean[min_iter], knee_angle_mean, min(interpolated_X_test[min_iter]), max(interpolated_X_test[min_iter]),
                  (sum(speeds)/len(speeds)), (sum(std_mean)/len(std_mean))]
    #T#for joint in [11,12,23,24]:
    #T#    joint_positions = gen_feature(f"{datadir}/{patient_name}_f{ex_num}_landmarks.json", joint0=joint)
    #T#    stability_measure = track_joint3D(joint_positions)
    #T#    #P#print(stability_measure)
    #T#    feature_vec.append(stability_measure)

    ##track stability of some joints and append it to feature vector
    joint_positions = gen_feature(f"{datadir}/{patient_name}_f{ex_num}_landmarks.json", joint0=12, joint1=24)
    stability_measure = np.mean(joint_positions)
    #P#print(stability_measure)
    feature_vec.append(stability_measure)
    joint_positions = gen_feature(f"{datadir}/{patient_name}_f{ex_num}_landmarks.json", joint0=11, joint1=23)
    stability_measure = np.mean(joint_positions)
    #P#print(stability_measure)
    feature_vec.append(stability_measure)

    print(feature_vec)
    if (FWRITE_ENABLED):
        output_file_h = open(output_feature_vec, 'a', encoding="utf8")
        output_file_h.write("[\"{}_f{}\",{},{}],\n".format(patient_name, ex_num, label_score, str(feature_vec)))
        output_file_h.close()

    #speed = abs(top_list_idx_times[0] - mid_list_idx_times[0])
    print("done")


#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#################################################################################
#15#
#15#
#15#import csv
#15#from scipy import signal
#15#from matplotlib import pyplot as plt 
#15#import numpy as np
#15#import numpy
#15#import sys
#15#from scipy.signal import argrelmin
#15#from scipy.signal import find_peaks
#15#output_file_h = open("splitted_lists1.txt", 'a', encoding="utf8")
#15#SIGNAL_LENGTH = 800
#15#PLOT_ENABLED = 1
#15#TOTAL_ITERS = 0
#15#def split_signal2iterations1(data, ex_num, label_score, filename):
#15#    data = numpy.array(data)
#15#    #if (PLOT_ENABLED):
#15#    #   plt.plot(data[:], label="full signal")
#15#    #   plt.legend()
#15#    #   plt.show()
#15#    
#15#    b, a = butter(1, 0.03)
#15#    np.set_printoptions(threshold=np.inf, linewidth=np.inf)
#15#    smooth = filtfilt(b, a, data)
#15#    splits = []
#15#    if (ex_num > 1 and ex_num < 5):
#15#        min_indices, _ = find_peaks(-smooth, distance=70, height=27)
#15#        max_indices, _ = find_peaks(smooth, distance=70, height=-25)
#15#        if (min_indices.size == 0 or max_indices.size == 0):
#15#            print("failed to perform")
#15#            return 0
#15#        while (len(max_indices) > 1):
#15#            if (max_indices[1] < min_indices[0]):
#15#                max_indices = max_indices[1:]
#15#                continue
#15#            break
#15#        while (len(min_indices) > 1):
#15#            if (min_indices[1] < min_indices[0]):
#15#                min_indices = min_indices[1:]
#15#                continue
#15#            break
#15#        ##if the last detected peak is a max, then we set the last series point as min peak
#15#        if (max_indices[-1] > min_indices[-1]):
#15#            min_indices = np.append(min_indices, len(data)-1)
#15#        min_idx = 0
#15#        max_idx = 0
#15#        split_list = []
#15#        tmp_list = []
#15#        
#15#        ##advance the min index point to a min which has at least one max peak before it
#15#        ##e.g. min0,max0,min1 >> min1
#15#        while (min_indices[min_idx] <= max_indices[0]):
#15#            min_idx = min_idx + 1
#15#        
#15#        ##if the min peak before the current one is before the first max peak, then we remove all the series
#15#        ##from the beginning until that point (min peak before the current one)
#15#        if (min_indices[min_idx-1] <= max_indices[0]):
#15#            data = data[min_indices[min_idx-1]:]
#15#            data = my_inter(data, SIGNAL_LENGTH)
#15#            return split_signal2iterations1(data, ex_num, label_score, filename)
#15#        ##the last min index is not the last point in the series, we remove all the points after it (it's a redundant tail)
#15#        if (min_indices[-1] != len(data)-1):
#15#            print("removing redundant tail")
#15#            data = data[:min_indices[-1]]
#15#            data = my_inter(data, SIGNAL_LENGTH)
#15#            return split_signal2iterations1(data, ex_num, label_score, filename)
#15#    
#15#        while (min_idx < len(min_indices) and max_idx < len(max_indices)):
#15#            tmp_list.append(min_indices[min_idx])
#15#            try:
#15#                while (min_indices[min_idx+1] <= max_indices[max_idx+1]):
#15#                    min_idx = min_idx + 1
#15#                    tmp_list.append(min_indices[min_idx])
#15#                    continue
#15#            except:
#15#                print("out of bounds")
#15#            split_list.append(int(np.mean(tmp_list)))
#15#            min_idx = min_idx + 1
#15#            max_idx = max_idx + 1
#15#            tmp_list.clear()
#15#    if (ex_num > 13 and ex_num < 17):
#15#        #find max an min peaks
#15#        min_indices, _ = find_peaks(-smooth, distance=70, height=-70)
#15#        max_indices, _ = find_peaks(smooth, distance=70, height=90)
#15#        #min_indices, _ = find_peaks(-smooth, distance=70, height=-23)
#15#        #max_indices, _ = find_peaks(smooth, distance=70, height=23)
#15#    
#15#        if (min_indices.size == 0 or max_indices.size == 0):
#15#            print("failed to perform")
#15#            if (PLOT_ENABLED):
#15#                plt.plot(data, label=f"data")
#15#                plt.plot(smooth, label=f"smooth")
#15#                plt.plot(-smooth, label=f"-smooth")
#15#                plt.legend()
#15#                plt.show()
#15#            output_file_h.write(filename+"$"+label_score+"#"+', '.join(map(str, data)) + '\n')
#15#            return 0
#15#            
#15#        while (len(min_indices) > 1):
#15#            if (min_indices[1] < min_indices[0]):
#15#                min_indices = min_indices[1:]
#15#                continue
#15#            break
#15#        while (len(max_indices) > 1):
#15#            if (max_indices[1] < min_indices[0]):
#15#                max_indices = max_indices[1:]
#15#                continue
#15#            break
#15#            
#15#        ##if the last detected peak is a min, then we set the last series point as max peak
#15#        if (min_indices[-1] > max_indices[-1]):
#15#            max_indices = np.append(max_indices, len(data)-1)
#15#        min_idx = 0
#15#        max_idx = 0
#15#        split_list = []
#15#        tmp_list = []
#15#        
#15#        ##advance the max index point to a max which has at least one min peak before it
#15#        ##e.g. max0,min0,max1 >> max1
#15#        while (max_indices[max_idx] <= min_indices[0]):
#15#            max_idx = max_idx + 1
#15#        
#15#        ##if the min peak before the current one is before the first max peak, then we remove all the series
#15#        ##from the beginning until that point (min peak before the current one)
#15#        if (max_indices[max_idx-1] <= min_indices[0]):
#15#            data = data[max_indices[max_idx-1]:]
#15#            data = my_inter(data, SIGNAL_LENGTH)
#15#            return split_signal2iterations1(data, ex_num, label_score, filename)
#15#        ##the last min index is not the last point in the series, we remove all the points after it (it's a redundant tail)
#15#        if (max_indices[-1] != len(data)-1):
#15#            print("removing redundant tail")
#15#            data = data[:max_indices[-1]]
#15#            data = my_inter(data, SIGNAL_LENGTH)
#15#            return split_signal2iterations1(data, ex_num, label_score, filename)
#15#    
#15#        while (max_idx < len(max_indices) and min_idx < len(min_indices)):
#15#            tmp_list.append(max_indices[max_idx])
#15#            try:
#15#                while (max_indices[max_idx+1] <= min_indices[min_idx+1]):
#15#                    max_idx = max_idx + 1
#15#                    tmp_list.append(max_indices[max_idx])
#15#                    continue
#15#            except:
#15#                print("out of bounds")
#15#            split_list.append(int(np.mean(tmp_list)))
#15#            min_idx = min_idx + 1
#15#            max_idx = max_idx + 1
#15#            tmp_list.clear()
#15#        
#15#        
#15#        
#15#        ##first split is the first minimum which its index is greater than the first max peak
#15#        splits.append(max_indices[np.argmin(max_indices<min_indices[0])])
#15#        
#15#        second_split = splits[0]
#15#        idx = 1
#15#        while (second_split == splits[0]):
#15#            second_split = max_indices[np.argmin(max_indices<min_indices[idx])]
#15#            idx = idx + 1
#15#    global TOTAL_ITERS
#15#    TOTAL_ITERS = TOTAL_ITERS + len(split_list)
#15#    largest_values = smooth[max_indices]
#15#    smallest_values = smooth[min_indices]
#15#    #if (PLOT_ENABLED):
#15#    #    plt.scatter(max_indices, largest_values, s = 50, color='red', marker = 'D')
#15#    #    plt.scatter(min_indices, smallest_values, s = 50, color='blue', marker = 'D')
#15#    #    plt.plot(smooth)
#15#    #    plt.show()
#15#    
#15#    iterations = [data[:split_list[0]]]
#15#    iterations[0] = np.array([float(x) for x in iterations[0]])
#15#    if (PLOT_ENABLED):
#15#        plt.plot(data[:], label="full signal")
#15#        plt.plot(np.arange(1, len(iterations[0])+1), iterations[0], label="iteration 1")
#15#    length = 0
#15#    for idx in range(1, len(split_list)):
#15#        iterations.append(data[split_list[idx-1]:split_list[idx]])
#15#        iterations[idx] = np.array([float(x) for x in iterations[idx]])
#15#        length = length + len(iterations[idx-1])
#15#        iter = np.linspace(length, length + len(iterations[idx])+1, len(iterations[idx]))
#15#        if (PLOT_ENABLED):
#15#            plt.plot(iter, iterations[idx], label=f"iteration {idx}")
#15#        print(iterations[idx].shape)
#15#        output_file_h.write(filename+"$"+label_score+"#"+', '.join(map(str, iterations[idx])) + '\n')
#15#    #np.savetxt(output_file_h, iterations[idx].reshape(iterations[idx].size),delimiter=',', fmt='%.15f')
#15#        
#15#    ###np.linspace is used to shift the signal starting point at the x axes in the plot
#15#    #second = np.linspace(len(iterations[0]), len(iterations[0])+len(iterations[1])+1, len(iterations[1]))
#15#    #plt.plot(second, iterations[1], label="iteration 2")
#15#    #
#15#    ###np.linspace is used to shift the signal starting point at the x axes in the plot
#15#    #third = np.linspace(len(iterations[0])+len(iterations[1]), len(iterations[0])+len(iterations[1])+len(iterations[2])+1, len(iterations[2]))
#15#    #plt.plot(third, iterations[2], label="iteration 3")
#15#    if (PLOT_ENABLED):
#15#        plt.legend()
#15#        plt.show()
#15#    
#15#    return iterations
#15#
#15#
#15#def my_inter(list1, resample_len):
#15#    if (list1.size == resample_len):
#15#        return list1.tolist()
#15#    tmp =  list1.reshape(list1.size)
#15#    resample_list1 = TimeSeriesResampler(sz=resample_len).fit_transform(tmp)
#15#    tmp = resample_list1.reshape(resample_len)
#15#    return tmp
#15#    
#15#TOTAL_ITERS = 0
#15#output_file_h = open("splitted_lists2.txt", 'a', encoding="utf8")
#15#def s1516_split():
#15#    directory = 'D:\\M.Sc_study\\github\\thesis\\ilan_computerVisionML_AI\\mediapipe_eval\\data\\ex14_15_16S'
#15#    i = 1
#15#    for filename in os.listdir(directory):
#15#        if filename.endswith('15_out.txt') or filename.endswith('16_out.txt'):
#15#            filepath = os.path.join(directory, filename)
#15#            with open(filepath, 'r') as file:
#15#                print(filepath)
#15#                header = file.readline()
#15#                ex_num = int(filename.split("_")[1][1:])
#15#                patient_name = (filename.split("_")[0])
#15#                label_score = str(scores_dict[patient_name][ex_num])
#15#                #file.readline() # skip the 2nd line
#15#                #angle_feature = file.readline() # read the 3rd line
#15#                angle_feature = file.readline() # read the 2nd line
#15#                #angle_feature = file.readline() # read the 3rd line
#15#                angle_list = [float(x) for x in angle_feature.split(",")] # convert the line to list of floats                #print(f"{patient_name}_{ex_num}:{label_score}")
#15#                plt.title(f"idx {i}, patient {filename}, score {label_score}")
#15#                i = i + 1
#15#                split_signal2iterations1(np.array(angle_list), ex_num, label_score, filename)
#15#    global output_file_h
#15#    output_file_h.close()
#15#    print(TOTAL_ITERS)
#15#



if __name__ == "__main__":
    #15#s1516_split()
    args = argparser()
    if (args.dataset == 'ALL'):
        # Get a list of all .mp4 files in the directory
        mp4_files = glob.glob(f"{args.dpath}/*.mp4")
        for file_path in mp4_files:
            # Get the file name without the extension
            file_name = os.path.splitext(os.path.basename(file_path))[0]
            match = search(r'\d+', file_name)
            if match:
                if (int(match.group()) > 38):
                    continue
            inference(args, dataset_name=file_name)
    inference(args, dataset_name=args.dataset)

